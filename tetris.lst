ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : tetris.asm
Current file: tetris.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Tetris
000000r 1               ; C64 conversion by Kees van Oss 2016
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $02a00
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "TETRIS"
000000r 1               
000000r 1               .org asm_code-22*header
0029EA  1               
0029EA  1               .IF header
0029EA  1               ;********************************************************************
0029EA  1               ; ATM Header for Atom emulator Wouter Ras
0029EA  1               
0029EA  1               name_start:
0029EA  1  54 45 54 52  	.byte filenaam			; Filename
0029EE  1  49 53        
0029F0  1               name_end:
0029F0  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
0029F4  1  00 00 00 00  
0029F8  1  00 00        
0029FA  1               	  .byte $0
0029FA  1               	.endrep
0029FA  1               
0029FA  1  00 2A        	.word asm_code			; 2 bytes startaddress
0029FC  1  00 2A        	.word exec			; 2 bytes linkaddress
0029FE  1  8B 35        	.word eind_asm-start_asm	; 2 bytes filelength
002A00  1               
002A00  1               ;********************************************************************
002A00  1               .ENDIF
002A00  1               
002A00  1               exec:
002A00  1               start_asm:
002A00  1               	.include "main.inc"
002A00  1               	.include "blocks.inc"
002A00  2               
002A00  2               ;
002A00  2               ;----------------------------------
002A00  2               ;Tetris for 6502. (c) WdW 2015
002A00  2               ;----------------------------------
002A00  2               ;
002A00  2               
002A00  2               ; game modes
002A00  2               
002A00  2               MODE_ATTRACT 		= 1
002A00  2               MODE_SELECTLEVEL	= 2
002A00  2               MODE_PLAY 		= 3
002A00  2               MODE_GAMEOVER 		= 4
002A00  2               MODE_ENTERNAME 		= 5
002A00  2               
002A00  2               DEBUG 			= 0
002A00  2               
002A00  2               
002A00  2               ; ------------------------------------------------
002A00  2               
002A00  2               	; initial setup
002A00  2               
002A00  2  A9 F0        	lda #$f0			; MODE4
002A02  2  8D 00 B0     	sta $b000
002A05  2               
002A05  2  A9 40        	lda #$40
002A07  2  8D 0B B8     	sta $b80b
002A0A  2               
002A0A  2  20 64 33             jsr SetupRandom 		; set the rnd seed
002A0D  2  20 D1 2E             jsr ClearScreen 		; clear the screen and set colors
002A10  2  20 E9 38     	jsr joyinit
002A13  2  20 27 5F     	jsr init
002A16  2               
002A16  2               	; initial setup done
002A16  2               	;select mode and call mode entry routine.
002A16  2               
002A16  2  A9 01        	lda #MODE_ATTRACT
002A18  2  8D 64 2A     	sta gameMode
002A1B  2  20 33 36     	jsr StartAttractMode
002A1E  2               
002A1E  2               ; --------------------------------------------------
002A1E  2               
002A1E  2               loopstart:
002A1E  2               
002A1E  2               wait:
002A1E  2  AD 09 B8     	lda $b809
002A21  2  C9 FF        	cmp #$ff
002A23  2  D0 F9        	bne wait
002A25  2  A9 10        	lda #<10000			; Wait 1/50 sec
002A27  2  8D 08 B8     	sta $b808
002A2A  2  A9 27        	lda #>10000
002A2C  2  8D 09 B8     	sta $b809
002A2F  2               
002A2F  2               	; determine game mode and update accordingly
002A2F  2               
002A2F  2  AD 64 2A     	lda gameMode
002A32  2  C9 01        	cmp #MODE_ATTRACT
002A34  2  D0 06        	bne @skip1
002A36  2  20 63 36     	jsr UpdateAttractMode
002A39  2  4C 1E 2A     	jmp loopstart
002A3C  2               @skip1:
002A3C  2  C9 02        	cmp #MODE_SELECTLEVEL
002A3E  2  D0 06        	bne @skip2
002A40  2  20 39 37     	jsr UpdateLevelSelectMode
002A43  2  4C 61 2A     	jmp loopend
002A46  2               @skip2:
002A46  2  C9 03        	cmp #MODE_PLAY
002A48  2  D0 06        	bne @skip3
002A4A  2  20 CD 33     	jsr UpdatePlayMode
002A4D  2  4C 61 2A     	jmp loopend
002A50  2               @skip3:
002A50  2  C9 04        	cmp #MODE_GAMEOVER
002A52  2  D0 06        	bne @skip4
002A54  2  20 93 35     	jsr UpdateGameOverMode
002A57  2  4C 61 2A     	jmp loopend
002A5A  2               @skip4:
002A5A  2  C9 05        	cmp #MODE_ENTERNAME
002A5C  2  D0 03        	bne loopend
002A5E  2  20 3E 3A     	jsr UpdateHighScoremode
002A61  2               loopend:
002A61  2               
002A61  2  4C 1E 2A     	jmp loopstart
002A64  2               
002A64  2               ; ------------------------------------------
002A64  2               
002A64  2               gameMode:
002A64  2  00           	.byte 0
002A65  2               pauseFlag:
002A65  2  00           	.byte 0 			; game is pause when this is set to 1
002A66  2               
002A66  2               
002A66  1               	.include "input.inc"
002A66  2               
002A66  2               
002A66  2               ; code concerning blocks
002A66  2               
002A66  2               
002A66  2               screenPointer 	= $80		; zero page pointer to a screen memory position
002A66  2               screenPointer2 	= $82 		; 2nd pointer to move data
002A66  2               
002A66  2               
002A66  2               ; sets screen memory pointer to x and y column
002A66  2               ; set X and Y register before calling this routine.
002A66  2               SetScreenPointer:
002A66  2  86 80        	stx screenPointer	; set low byte. use x immediately...
002A68  2  A9 4D        	lda #>L0400
002A6A  2  85 81        	sta screenPointer+1 	; set hi byte
002A6C  2               
002A6C  2  C0 00        	cpy #0			; at top of the screen?
002A6E  2  F0 0D        	beq exit1		; then no change is needed
002A70  2  8A           	txa 			; get the current low byte of screen pointer
002A71  2               loop1:
002A71  2  18           	clc
002A72  2  69 28        	adc #40			; add a row (screen is 40 chars wide)
002A74  2  90 02        	bcc skip1 		; no page boundery passed? then skip next instruction
002A76  2  E6 81        	inc screenPointer+1 	; page boundery passed, increment screen memory hi byte
002A78  2               skip1:
002A78  2  88           	dey			; decrement the y count
002A79  2  D0 F6        	bne loop1		; do next row if more needed
002A7B  2  85 80        	sta screenPointer	; store the screen memory low byte
002A7D  2               exit1:
002A7D  2  60           	rts
002A7E  2               
002A7E  2               
002A7E  2               ; this subroutine adjusts the screenPointer pointer so it
002A7E  2               ; points to the row exactly below it.
002A7E  2               DownOneRow:
002A7E  2  A5 80        	lda screenPointer 	; add 40 to the screen memory pointer
002A80  2  18           	clc
002A81  2  69 28        	adc #40
002A83  2  90 02        	bcc skip2 		; skip next instruction if page boundery was not passed
002A85  2  E6 81        	inc screenPointer+1 	; inc hi byte of the screen address
002A87  2               skip2:
002A87  2  85 80        	sta screenPointer 	; store new lo byte
002A89  2  60           	rts
002A8A  2               
002A8A  2               
002A8A  2               ; this subroutine adjusts the screenPointer pointer so it
002A8A  2               ; points to the row exactly above it.
002A8A  2               UpOneRow:
002A8A  2  A5 80        	lda screenPointer 	; dec 40 from the screen memory pointer
002A8C  2  38           	sec
002A8D  2  E9 28        	sbc #40
002A8F  2  B0 02        	bcs skip3 		; skip next instruction if page boundery was not passed
002A91  2  C6 81        	dec screenPointer+1 	; dec hi byte of the screen address
002A93  2               skip3:
002A93  2  85 80        	sta screenPointer 	; store new lo byte
002A95  2  60           	rts
002A96  2               
002A96  2               
002A96  2               ; prints a block on the screen
002A96  2               ; x and y position but be set for the use of SetScreenPosition ...
002A96  2               ; and SelectBlock must have been called before calling this subroutine
002A96  2               
002A96  2               PrintBlock:
002A96  2  AE B6 2C     	ldx blockXposition 	; print to the correct place on screen
002A99  2  8E 09 30     	stx blk_x
002A9C  2  AC B7 2C     	ldy blockYposition
002A9F  2  8C 0A 30     	sty blk_y
002AA2  2  20 66 2A     	jsr SetScreenPointer
002AA5  2               
002AA5  2               	; get pointer to the start of block data
002AA5  2               
002AA5  2  AE BA 2C     	ldx currentFrame 	; this has been set by calling SelectBlock or AnimateBlock
002AA8  2               
002AA8  2  BD CD 2C     	lda frameArrayLo,x 	; get the lo byte
002AAB  2  8D B9 2A     	sta printLoop+1		; store in lda instruction
002AAE  2  BD E0 2C     	lda frameArrayHi,x 	; same for hi byte
002AB1  2  8D BA 2A     	sta printLoop+2 	; and store
002AB4  2               
002AB4  2               	; print the block
002AB4  2               
002AB4  2  A2 00        	ldx #$00 		; reset the block data counter
002AB6  2  A0 00        	ldy #$00 		; reset the print counter
002AB8  2               printLoop:
002AB8  2  BD 10 10     	lda $1010,x 		; get block data. the adress is modified at the start of this subroutine
002ABB  2  C9 20        	cmp #$20 		; is it a space?
002ABD  2  F0 05        	beq skip4 		; then skip printing it
002ABF  2  91 80        	sta (screenPointer),y   ; put it on the screen
002AC1  2               
002AC1  2  20 23 2E     	jsr displayblock 
002AC4  2               skip4:
002AC4  2  E8           	inx 			; inc the block data pointer
002AC5  2  E0 10        	cpx #16 		; done 16 characters? (4x4)
002AC7  2  D0 01        	bne skip5 		; continue printing if not
002AC9  2  60           	rts
002ACA  2               skip5:
002ACA  2  EE 09 30     	inc blk_x
002ACD  2  C8           	iny			; inc the print counter
002ACE  2  C0 04        	cpy #$04 		; each block is 4 characters wide, done for this row?
002AD0  2  D0 E6        	bne printLoop 		; continue this row
002AD2  2               
002AD2  2  20 7E 2A     	jsr DownOneRow 		; go down one row
002AD5  2  EE 0A 30     	inc blk_y
002AD8  2  38           	sec
002AD9  2  AD 09 30     	lda blk_x
002ADC  2  E9 04        	sbc #4
002ADE  2  8D 09 30     	sta blk_x
002AE1  2  A0 00        	ldy #$00 		; reset the counter for a new row
002AE3  2  4C B8 2A     	jmp printLoop 		; do the next row
002AE6  2               
002AE6  2               
002AE6  2               ; Checks if there is space for a block to be printed.
002AE6  2               ; Set the position registers before calling this routine.
002AE6  2               ; A register is set according to outcome: 0 = no problem, 1 = no space
002AE6  2               
002AE6  2               CheckBlockSpace:
002AE6  2  AE B6 2C     	ldx blockXposition
002AE9  2  AC B7 2C     	ldy blockYposition
002AEC  2  20 66 2A     	jsr SetScreenPointer
002AEF  2               
002AEF  2               	; first, get pointer to the start of block data
002AEF  2               
002AEF  2  AE BA 2C     	ldx currentFrame
002AF2  2  BD CD 2C     	lda frameArrayLo,x 	; get the lo byte
002AF5  2  8D 03 2B     	sta spaceLoop+1		; store in lda instruction
002AF8  2  BD E0 2C     	lda frameArrayHi,x 	; same for hi byte
002AFB  2  8D 04 2B     	sta spaceLoop+2 	; and store
002AFE  2               
002AFE  2               	; check the space
002AFE  2               
002AFE  2  A2 00        	ldx #$00 		; reset the block data counter
002B00  2  A0 00        	ldy #$00 		; reset the print counter
002B02  2               spaceLoop:
002B02  2  BD 10 10     	lda $1010,x 		   	; get block data.
002B05  2  C9 20        	cmp #$20 		; is it a space?
002B07  2  F0 09        	beq skip6 		; then skip the check it
002B09  2               
002B09  2               	; check the position where data must be printed
002B09  2               
002B09  2  B1 80        	lda (screenPointer),y	; load the data on this position
002B0B  2  C9 20        	cmp #$20 		; is it a space?
002B0D  2  F0 03        	beq skip6 		; yes. no problem. continue check
002B0F  2               
002B0F  2  A9 01        	lda #$01 		; no space for block. set flag
002B11  2  60           	rts
002B12  2               skip6:
002B12  2  E8           	inx 			; inc the block data pointer
002B13  2  E0 10        	cpx #16 		; done 16 characters? (4x4)
002B15  2  D0 03        	bne skip7 		; continue printing if not
002B17  2  A9 00        	lda #$00 		; all locations checked. done. clear flag
002B19  2  60           	rts
002B1A  2               skip7:
002B1A  2  C8           	iny
002B1B  2  C0 04        	cpy #$04
002B1D  2  D0 E3        	bne spaceLoop
002B1F  2  20 7E 2A     	jsr DownOneRow
002B22  2  A0 00        	ldy #$00
002B24  2  4C 02 2B     	jmp spaceLoop
002B27  2               
002B27  2               
002B27  2               ; erases a block on the screen
002B27  2               ; same as PrintBlock but outputting spaces
002B27  2               EraseBlock:
002B27  2  AE B6 2C     	ldx blockXposition
002B2A  2  8E 09 30     	stx blk_x
002B2D  2  AC B7 2C     	ldy blockYposition
002B30  2  8C 0A 30     	sty blk_y
002B33  2  20 66 2A     	jsr SetScreenPointer
002B36  2               
002B36  2               	; first, get pointer to the start of block data
002B36  2               
002B36  2  AE BA 2C     	ldx currentFrame 	; this has been set by calling SelectBlock or AnimateBlock
002B39  2               
002B39  2  BD CD 2C     	lda frameArrayLo,x 	; get the lo byte
002B3C  2  8D 4A 2B     	sta eraseLoop+1		; store in lda instruction
002B3F  2  BD E0 2C     	lda frameArrayHi,x 	; same for hi byte
002B42  2  8D 4B 2B     	sta eraseLoop+2 	; and store
002B45  2               
002B45  2               	; erase the block
002B45  2               
002B45  2  A2 00        	ldx #$00 		; reset the block data counter
002B47  2  A0 00        	ldy #$00 		; reset the columns counter
002B49  2               eraseLoop:
002B49  2  BD 10 10     	lda $1010,x 		; get block data. the adress is modified at the start of this subroutine
002B4C  2  C9 20        	cmp #$20 		; is it a space?
002B4E  2  F0 07        	beq skip8 		; then skip erasing it.
002B50  2  A9 20        	lda #$20 		; use a space
002B52  2  91 80        	sta (screenPointer),y   ; and erase this block character.
002B54  2               
002B54  2  20 23 2E     	jsr displayblock
002B57  2               skip8:
002B57  2  EE 09 30     	inc blk_x
002B5A  2  E8           	inx 			; inc the block data pointer
002B5B  2  E0 10        	cpx #16 		; done 16 characters? (4x4)
002B5D  2  D0 01        	bne skip9 		; continue printing if not
002B5F  2  60           	rts 			; done!
002B60  2               skip9:
002B60  2  C8           	iny			; inc the columns counter
002B61  2  C0 04        	cpy #$04 		; each block is 4 columns wide, done for this row?
002B63  2  D0 E4        	bne eraseLoop 		; continue this row
002B65  2               
002B65  2  20 7E 2A     	jsr DownOneRow 		; go down one row
002B68  2  EE 0A 30     	inc blk_y
002B6B  2  38           	sec
002B6C  2  AD 09 30     	lda blk_x
002B6F  2  E9 04        	sbc #4
002B71  2  8D 09 30     	sta blk_x
002B74  2  A0 00        	ldy #$00 		; reset the counter for a new row
002B76  2  4C 49 2B     	jmp eraseLoop 		; do the next row
002B79  2               
002B79  2               
002B79  2               ; this subroutine will select a block.
002B79  2               ; set .A register with block id before calling this subroutine
002B79  2               SelectBlock:
002B79  2  8D B8 2C     	sta currentBlockID 	; store the block id
002B7C  2  AA           	tax
002B7D  2  BD BF 2C     	lda blockFrameStart,x 	; get begin frame number for this block
002B80  2  8D BA 2C     	sta currentFrame 	; and store it for display
002B83  2  8D BB 2C     	sta firstFrame 		; and for AnimateBlock routine
002B86  2  BD C6 2C     	lda blockFrameEnd,x 	; get last frame number for this block
002B89  2  8D BC 2C     	sta lastFrame 		; and store it for AnimateBlock routine
002B8C  2  60           	rts
002B8D  2               
002B8D  2               
002B8D  2               ; this subroutine will advance the block animation forward or backwards...
002B8D  2               ; depending on the value of the A register. Set that before calling this subroutine.
002B8D  2               ; 0 = forward, clockwise
002B8D  2               ; 1 = backward, counter clockwise
002B8D  2               ; Also, SelectBlock must have been called so the animation settings are correct.
002B8D  2               
002B8D  2               AnimateBlock:
002B8D  2  C9 01        	cmp #1 			; see if we need to move the animation
002B8F  2  F0 13        	beq doBackward	 	; forward or backward
002B91  2               doForward:
002B91  2  AD BA 2C     	lda currentFrame 	; get the current frame number
002B94  2  CD BC 2C     	cmp lastFrame 		; already done the last frame?
002B97  2  F0 04        	beq skip10 		; yes. go set to first frame
002B99  2  EE BA 2C     	inc currentFrame 	; no. go one frame forward
002B9C  2  60           	rts 			; done!
002B9D  2               skip10:
002B9D  2  AD BB 2C     	lda firstFrame 		; reset the frame
002BA0  2  8D BA 2C     	sta currentFrame 	; to the first frame
002BA3  2  60           	rts 			; done!
002BA4  2               doBackward:
002BA4  2  AD BA 2C     	lda currentFrame 	; get the current frame.
002BA7  2  CD BB 2C     	cmp firstFrame 		; already at the first frame?
002BAA  2  F0 04        	beq skip11 		; then reset to last frame
002BAC  2  CE BA 2C     	dec currentFrame 	; no. go back one frame
002BAF  2  60           	rts 			; done!
002BB0  2               skip11:
002BB0  2  AD BC 2C     	lda lastFrame 		; reset the animation to
002BB3  2  8D BA 2C     	sta currentFrame 	; the last frame.
002BB6  2  60           	rts 			; done!
002BB7  2               
002BB7  2               
002BB7  2               ; this subroutine updates the block fall timer...
002BB7  2               ; and drops the block a row when needed.
002BB7  2               ; A register holds: 0: nothing happened ...
002BB7  2               ; 1: block fell, 2:block fell, new block needed.
002BB7  2               DropBlock:
002BB7  2  CE BE 2C     	dec fallDelayTimer 	; update the delay timer
002BBA  2  F0 03        	beq skip12 		; drop the block if 0 is reached
002BBC  2  A9 00        	lda #$00 		; return 0 = nothing happened
002BBE  2  60           	rts
002BBF  2               skip12:
002BBF  2  AD BD 2C     	lda fallDelay 		; reset the block fall delay
002BC2  2  8D BE 2C     	sta fallDelayTimer
002BC5  2               
002BC5  2               	; drop the block
002BC5  2               
002BC5  2  20 27 2B     	jsr EraseBlock 		; erase from screen
002BC8  2  EE B7 2C     	inc blockYposition 	; move 1 row down
002BCB  2  20 E6 2A     	jsr CheckBlockSpace 	; will it fit?
002BCE  2  D0 06        	bne skip13 		; A is set to 1, so no.
002BD0  2  20 96 2A     	jsr PrintBlock 		; yes. print it
002BD3  2  A9 01        	lda #$01 		; status is block fell
002BD5  2  60           	rts
002BD6  2               skip13:
002BD6  2  CE B7 2C     	dec blockYposition 	; no. move back.
002BD9  2  20 96 2A     	jsr PrintBlock 		; print it
002BDC  2  A9 02        	lda #$02 		; new block needed
002BDE  2  60           	rts
002BDF  2               
002BDF  2               
002BDF  2               ; selects a new random block
002BDF  2               ; it will take the id from the nextBlockID address.
002BDF  2               ; the next block will be again determined, and printed on the screen
002BDF  2               
002BDF  2               ; register A holds: 0 if all went well, 1 if new block overlaps screen data (game over!)
002BDF  2               NewBlock:
002BDF  2               
002BDF  2               	; reset the block fall delay
002BDF  2               
002BDF  2  AD BD 2C     	lda fallDelay
002BE2  2  8D BE 2C     	sta fallDelayTimer
002BE5  2               
002BE5  2               	; nextBlockID was printed as the next block.
002BE5  2               	; set location to remove from screen
002BE5  2               
002BE5  2  A2 19        	ldx #25 		; erase block from 25,15
002BE7  2  A0 0F        	ldy #15
002BE9  2  8E B6 2C     	stx blockXposition 	; save the position
002BEC  2  8C B7 2C     	sty blockYposition
002BEF  2  20 66 2A     	jsr SetScreenPointer
002BF2  2               
002BF2  2               	; select and save the ID
002BF2  2               	; because we will create the block later on
002BF2  2               
002BF2  2  AD B9 2C     	lda nextBlockID
002BF5  2  48           	pha
002BF6  2               
002BF6  2  20 79 2B     	jsr SelectBlock 	; select it
002BF9  2  20 27 2B     	jsr EraseBlock 		; remove it
002BFC  2               
002BFC  2               	; get the id of the NEW block
002BFC  2               	; and print it on the bottomright of the screen
002BFC  2               
002BFC  2  20 6E 33     	jsr GetRandom
002BFF  2  8D B9 2C     	sta nextBlockID 	; save next block id
002C02  2  20 66 2A     	jsr SetScreenPointer 	; restore screenpointer to 25,15
002C05  2               				; as set previously
002C05  2  AD B9 2C     	lda nextBlockID
002C08  2  20 79 2B     	jsr SelectBlock
002C0B  2  20 96 2A     	jsr PrintBlock 	; print it.
002C0E  2               
002C0E  2               	; done.
002C0E  2               
002C0E  2               	; create the new player block
002C0E  2               
002C0E  2  A2 0F        	ldx #15 		; put new block on 15,0
002C10  2  A0 00        	ldy #00
002C12  2  8E B6 2C     	stx blockXposition 	; save the position
002C15  2  8C B7 2C     	sty blockYposition
002C18  2  20 66 2A     	jsr SetScreenPointer
002C1B  2               
002C1B  2  68           	pla 			; restore the player block id
002C1C  2  8D B8 2C     	sta currentBlockID 	; put in current id address
002C1F  2  20 79 2B     	jsr SelectBlock 	; select it
002C22  2               
002C22  2  20 E6 2A     	jsr CheckBlockSpace 	; will it fit?
002C25  2  D0 06        	bne skip14 		; A is set to 1, so no
002C27  2  20 96 2A     	jsr PrintBlock 		; print it.
002C2A  2  A9 00        	lda #$00 		; notify all is well.
002C2C  2  60           	rts
002C2D  2               skip14:
002C2D  2  20 96 2A     	jsr PrintBlock 		; print it
002C30  2  A9 01        	lda #$01 		; notify that it doesnt fit!!!
002C32  2  60           	rts
002C33  2               
002C33  2               
002C33  2               ; -------------------------------------------------
002C33  2               
002C33  2               BlockLeft:
002C33  2  20 27 2B     	jsr EraseBlock 		; remove block on this position
002C36  2  CE B6 2C     	dec blockXposition 	; alter block position
002C39  2  20 E6 2A     	jsr CheckBlockSpace 	; will it fit?
002C3C  2  F0 03        	beq skip15 		; yes. print it
002C3E  2  EE B6 2C     	inc blockXposition 	; no. move it back
002C41  2               skip15:
002C41  2  20 96 2A     	jsr PrintBlock
002C44  2  60            	rts
002C45  2               
002C45  2               BlockRight:
002C45  2  20 27 2B       	jsr EraseBlock
002C48  2  EE B6 2C       	inc blockXposition
002C4B  2  20 E6 2A       	jsr CheckBlockSpace
002C4E  2  F0 03         	beq skip16
002C50  2  CE B6 2C       	dec blockXposition
002C53  2               skip16:
002C53  2  20 96 2A       	jsr PrintBlock
002C56  2  60             	rts
002C57  2               
002C57  2               BlockDown:
002C57  2  20 27 2B     	jsr EraseBlock
002C5A  2  EE B7 2C     	inc blockYposition
002C5D  2  20 E6 2A     	jsr CheckBlockSpace
002C60  2  F0 0C        	beq skip17
002C62  2               
002C62  2               	; block doesn't fit
002C62  2  CE B7 2C     	dec blockYposition
002C65  2  20 96 2A     	jsr PrintBlock
002C68  2               
002C68  2  A9 04        	lda #$04 		; we made block drop
002C6A  2  8D BE 2C     	sta fallDelayTimer 	; so create new one without delay
002C6D  2  60           	rts
002C6E  2               skip17:
002C6E  2  20 96 2A     	jsr PrintBlock
002C71  2               
002C71  2  A9 04         	lda #$04 	 	; have a smaller falldelay
002C73  2  8D BE 2C      	sta fallDelayTimer 	; as we move down ourselves
002C76  2               
002C76  2                	; moving the block down gives points
002C76  2               
002C76  2  A9 01        	lda #1
002C78  2  8D 55 33      	sta addition
002C7B  2  A9 00         	lda #0
002C7D  2  8D 56 33      	sta addition+1
002C80  2  8D 57 33      	sta addition+2
002C83  2  20 AD 32      	jsr AddScore
002C86  2  20 CC 32      	jsr PrintScore
002C89  2  60           	rts
002C8A  2               
002C8A  2               BlockRotateCCW:
002C8A  2  20 27 2B       	jsr EraseBlock 		; remove block on this position
002C8D  2  A9 01          	lda #$01 		; yes. 1 means counter clock wise
002C8F  2  20 8D 2B      	jsr AnimateBlock 	; rotate it
002C92  2  20 E6 2A      	jsr CheckBlockSpace 	; will it fit?
002C95  2  F0 05         	beq skip18 		; yes, print it
002C97  2  A9 00         	lda #$00 		; no
002C99  2  20 8D 2B       	jsr AnimateBlock 	; turn it back
002C9C  2               skip18:
002C9C  2  20 96 2A       	jsr PrintBlock
002C9F  2  60             	rts
002CA0  2               
002CA0  2               BlockRotateCW:
002CA0  2  20 27 2B      	jsr EraseBlock
002CA3  2  A9 00         	lda #$00
002CA5  2  20 8D 2B      	jsr AnimateBlock
002CA8  2  20 E6 2A      	jsr CheckBlockSpace
002CAB  2  F0 05         	beq skip19
002CAD  2  A9 01         	lda #$01
002CAF  2  20 8D 2B      	jsr AnimateBlock
002CB2  2               skip19:
002CB2  2  20 96 2A      	jsr PrintBlock
002CB5  2  60            	rts
002CB6  2               
002CB6  2               ; ---------------------------------------------------------------------------------------------
002CB6  2               
002CB6  2               ; registers to store information in
002CB6  2               
002CB6  2               blockXposition:
002CB6  2  00           	.byte 0 		; current player block x position
002CB7  2               blockYposition:
002CB7  2  00           	.byte 0 		; current player block y position
002CB8  2               currentBlockID:
002CB8  2  00           	.byte 0 		; current block ID
002CB9  2               nextBlockID:
002CB9  2  00           	.byte 0 		; this is the next block to fall
002CBA  2               
002CBA  2               currentFrame:
002CBA  2  00           	.byte 0  		; frame of current block
002CBB  2               firstFrame:
002CBB  2  00           	.byte 0			; first animation frame for current block
002CBC  2               lastFrame:
002CBC  2  00           	.byte 0			; last animation frame for current block
002CBD  2               
002CBD  2               fallDelay:
002CBD  2  00           	.byte 0 		; delay between block drops for this level
002CBE  2               fallDelayTimer:
002CBE  2  00           	.byte 0 		; current timer for delay
002CBF  2               
002CBF  2               
002CBF  2               ; ---------------------------------------------------------------------------------------------
002CBF  2               
002CBF  2               ; arrays of block start and end animation frames.
002CBF  2               ; example: block 0 animation starts at frame 0 and ends at frame 3
002CBF  2               
002CBF  2               ;                0 1  2  3  4  5  6
002CBF  2               blockFrameStart:
002CBF  2  00 04 08 0C  	.byte 0,4, 8,12,14,16,18
002CC3  2  0E 10 12     
002CC6  2               
002CC6  2               blockFrameEnd:
002CC6  2  03 07 0B 0D  	.byte 3,7,11,13,15,17,18
002CCA  2  0F 11 12     
002CCD  2               
002CCD  2               ; these lo and hi byte pointers refer to the block data adress values
002CCD  2               
002CCD  2               frameArrayLo:
002CCD  2  F3 03 13 23  	.byte <frame00, <frame01, <frame02, <frame03 	; block 0
002CD1  2  33 43 53 63  	.byte <frame04, <frame05, <frame06, <frame07 	; block 1
002CD5  2  73 83 93 A3  	.byte <frame08, <frame09, <frame10, <frame11 	; block 2
002CD9  2  B3 C3        	.byte <frame12, <frame13			; block 3
002CDB  2  D3 E3        	.byte <frame14, <frame15			; block 4
002CDD  2  F3 03        	.byte <frame16, <frame17			; block 5
002CDF  2  13           	.byte <frame18				 	; block 6
002CE0  2               
002CE0  2               frameArrayHi:
002CE0  2  2C 2D 2D 2D  	.byte >frame00, >frame01, >frame02, >frame03 	; block 0
002CE4  2  2D 2D 2D 2D  	.byte >frame04, >frame05, >frame06, >frame07 	; block 1
002CE8  2  2D 2D 2D 2D  	.byte >frame08, >frame09, >frame10, >frame11 	; block 2
002CEC  2  2D 2D        	.byte >frame12, >frame13			; block 3
002CEE  2  2D 2D        	.byte >frame14, >frame15			; block 4
002CF0  2  2D 2E        	.byte >frame16, >frame17			; block 5
002CF2  2  2E           	.byte >frame18				 	; block 6
002CF3  2               
002CF3  2               ; block0, 4 frames
002CF3  2               
002CF3  2               frame00:
002CF3  2  20 49 49 20  	.byte " II "
002CF7  2  20 20 49 20  	.byte "  I "
002CFB  2  20 20 49 20  	.byte "  I "
002CFF  2  20 20 20 20  	.byte "    "
002D03  2               frame01:
002D03  2  20 20 20 49  	.byte "   I"
002D07  2  20 49 49 49  	.byte " III"
002D0B  2  20 20 20 20  	.byte "    "
002D0F  2  20 20 20 20  	.byte "    "
002D13  2               frame02:
002D13  2  20 49 20 20  	.byte " I  "
002D17  2  20 49 20 20  	.byte " I  "
002D1B  2  20 49 49 20  	.byte " II "
002D1F  2  20 20 20 20  	.byte "    "
002D23  2               frame03:
002D23  2  20 20 20 20  	.byte "    "
002D27  2  20 49 49 49  	.byte " III"
002D2B  2  20 49 20 20  	.byte " I  "
002D2F  2  20 20 20 20  	.byte "    "
002D33  2               
002D33  2               ; block1, 4 frames
002D33  2               
002D33  2               frame04:
002D33  2  20 20 47 20  	.byte "  G "
002D37  2  20 47 47 20  	.byte " GG "
002D3B  2  20 20 47 20  	.byte "  G "
002D3F  2  20 20 20 20  	.byte "    "
002D43  2               frame05:
002D43  2  20 20 47 20  	.byte "  G "
002D47  2  20 47 47 47  	.byte " GGG"
002D4B  2  20 20 20 20  	.byte "    "
002D4F  2  20 20 20 20  	.byte "    "
002D53  2               frame06:
002D53  2  20 20 47 20  	.byte "  G "
002D57  2  20 20 47 47  	.byte "  GG"
002D5B  2  20 20 47 20  	.byte "  G "
002D5F  2  20 20 20 20  	.byte "    "
002D63  2               frame07:
002D63  2  20 20 20 20  	.byte "    "
002D67  2  20 47 47 47  	.byte " GGG"
002D6B  2  20 20 47 20  	.byte "  G "
002D6F  2  20 20 20 20  	.byte "    "
002D73  2               
002D73  2               ; block2, 4 frames
002D73  2               
002D73  2               frame08:
002D73  2  20 48 48 20  	.byte " HH "
002D77  2  20 48 20 20  	.byte " H  "
002D7B  2  20 48 20 20  	.byte " H  "
002D7F  2  20 20 20 20  	.byte "    "
002D83  2               frame09:
002D83  2  20 20 20 20  	.byte "    "
002D87  2  48 48 48 20  	.byte "HHH "
002D8B  2  20 20 48 20  	.byte "  H "
002D8F  2  20 20 20 20  	.byte "    "
002D93  2               frame10:
002D93  2  20 48 20 20  	.byte " H  "
002D97  2  20 48 20 20  	.byte " H  "
002D9B  2  48 48 20 20  	.byte "HH  "
002D9F  2  20 20 20 20  	.byte "    "
002DA3  2               frame11:
002DA3  2  48 20 20 20  	.byte "H   "
002DA7  2  48 48 48 20  	.byte "HHH "
002DAB  2  20 20 20 20  	.byte "    "
002DAF  2  20 20 20 20  	.byte "    "
002DB3  2               
002DB3  2               ; block3, 2 frames
002DB3  2               
002DB3  2               frame12:
002DB3  2  20 58 20 20  	.byte " X  "
002DB7  2  20 58 58 20  	.byte " XX "
002DBB  2  20 20 58 20  	.byte "  X "
002DBF  2  20 20 20 20  	.byte "    "
002DC3  2               frame13:
002DC3  2  20 58 58 20  	.byte " XX "
002DC7  2  58 58 20 20  	.byte "XX  "
002DCB  2  20 20 20 20  	.byte "    "
002DCF  2  20 20 20 20  	.byte "    "
002DD3  2               
002DD3  2               ; block4, 2 frames
002DD3  2               
002DD3  2               frame14:
002DD3  2  20 20 48 20  	.byte "  H "
002DD7  2  20 48 48 20  	.byte " HH "
002DDB  2  20 48 20 20  	.byte " H  "
002DDF  2  20 20 20 20  	.byte "    "
002DE3  2               frame15:
002DE3  2  48 48 20 20  	.byte "HH  "
002DE7  2  20 48 48 20  	.byte " HH "
002DEB  2  20 20 20 20  	.byte "    "
002DEF  2  20 20 20 20  	.byte "    "
002DF3  2               
002DF3  2               ;block5, 2 frames
002DF3  2               
002DF3  2               frame16:
002DF3  2               
002DF3  2  20 5C 20 20  	.byte 32,92,32,32
002DF7  2  20 5D 20 20  	.byte 32,93,32,32
002DFB  2  20 5D 20 20  	.byte 32,93,32,32
002DFF  2  20 5E 20 20  	.byte 32,94,32,32
002E03  2               
002E03  2               	; .byte " K  "
002E03  2               	; .byte " K  "
002E03  2               	; .byte " K  "
002E03  2               	; .byte " K  "
002E03  2               frame17:
002E03  2  20 20 20 20  	.byte "    "
002E07  2  59 5A 5A 5B  	.byte 89,90,90,91
002E0B  2               ;	.byte "YZZK"
002E0B  2  20 20 20 20  	.byte "    "
002E0F  2  20 20 20 20  	.byte "    "
002E13  2               
002E13  2               ; block6, 1 frame
002E13  2               
002E13  2               frame18:
002E13  2  20 20 20 20  	.byte "    "
002E17  2  20 4A 4A 20  	.byte " JJ "
002E1B  2  20 4A 4A 20  	.byte " JJ "
002E1F  2  20 20 20 20  	.byte "    "
002E23  2               
002E23  2               displayblock:
002E23  2  48           	pha
002E24  2  AD 09 30     	lda blk_x
002E27  2  38           	sec
002E28  2  E9 05        	sbc #5
002E2A  2  8D 84 00     	sta XPOS
002E2D  2  AD 0A 30     	lda blk_y
002E30  2  18           	clc
002E31  2  69 02        	adc #2
002E33  2  8D 85 00     	sta YPOS
002E36  2  68           	pla
002E37  2  4C EE 37     	jmp chrout
002E3A  2               
002E3A  1               	.include "screens.inc"
002E3A  2               
002E3A  2               keyPressed 		= $83 	; scnkey puts code of held key here.
002E3A  2               INPUTDELAY		= 15	; update delay between input checks
002E3A  2               
002E3A  2               ; keycodes to check for in inputResult values
002E3A  2               ; valid controls are also used for joystick results.
002E3A  2               
002E3A  2               LEFT 			= 47 	; , <
002E3A  2               RIGHT			= 44	; . >
002E3A  2               TURNCOUNTER		= 13	; A
002E3A  2               TURNCLOCK 		= 10	; S
002E3A  2               DOWN 			= 1 	; ENTER
002E3A  2               PAUSE 			= 41 	; P
002E3A  2               RESET 			= 4	; F1
002E3A  2               
002E3A  2               CHANGEBACKGROUND 	= 5 	; F3
002E3A  2               CHANGECOLOUR 		= 6 	; F5
002E3A  2               
002E3A  2               NOKEY 			= 64
002E3A  2               NOINPUT 		= 255	; no input detected
002E3A  2               
002E3A  2               ; this byte holds the result of the input query
002E3A  2               ; game modes can check this byte and get the
002E3A  2               ; registered input after calling GetInput
002E3A  2               
002E3A  2               inputResult:
002E3A  2  00           	.byte 0
002E3B  2               
002E3B  2               
002E3B  2               ; ------------------------------------------------------
002E3B  2               
002E3B  2               ; this routine will scan keyboard first and then the joystick
002E3B  2               ; but only if there was no input from the keyboard
002E3B  2               
002E3B  2               GetInput:
002E3B  2  20 49 2E     	jsr GetKeyInput
002E3E  2  AD 3A 2E     	lda inputResult
002E41  2  C9 FF        	cmp #NOINPUT
002E43  2  D0 03        	bne @skip1
002E45  2  20 6D 2E     	jsr GetJoyInput
002E48  2               @skip1:
002E48  2  60           	rts
002E49  2               
002E49  2               ; ------------------------------------------------------
002E49  2               
002E49  2               ; this subroutine gets keyboard input
002E49  2               ; only one key at a time is registered
002E49  2               ; "inputResult" will hold the registered input
002E49  2               
002E49  2               GetKeyInput:
002E49  2  A9 FF        	lda #NOINPUT 		; first assume there is no input
002E4B  2  8D 3A 2E     	sta inputResult
002E4E  2               
002E4E  2  A5 83        	lda keyPressed
002E50  2  CD CF 2E     	cmp previousKey 	; is it a different key than before?
002E53  2  D0 06        	bne skip21	 	; if yes, then @skip the current input delay
002E55  2               				; because we want snappy controls
002E55  2               doDelay:	
002E55  2  CE CE 2E     	dec inputDelayCounter 	; count down
002E58  2  F0 01        	beq skip21 		; continue if delay passed
002E5A  2  60           	rts 			; delay ongoing. exit. no input.
002E5B  2               skip21:
002E5B  2  8D CF 2E     	sta previousKey 	; save key code for next update
002E5E  2  C9 40        	cmp #NOKEY 		; is it the no key held code?
002E60  2  D0 02        	bne @skip3 		; no
002E62  2  A9 FF        	lda #NOINPUT 		; yes. select that input result
002E64  2               @skip3:
002E64  2  8D 3A 2E     	sta inputResult 	; store input result
002E67  2               
002E67  2  A9 0F        	lda #INPUTDELAY 	; restore key delay counter
002E69  2  8D CE 2E     	sta inputDelayCounter
002E6C  2  60           	rts
002E6D  2               
002E6D  2               ; -------------------------------------------------
002E6D  2               
002E6D  2               ; this subroutine checks for joystick input from port 2
002E6D  2               ; the input register is rotated and the carry bit is checked
002E6D  2               ; we have only one joystick button, so UP is used for rotate CCW
002E6D  2               ; "inputResult" will hold the registered input
002E6D  2               
002E6D  2               CIAPRA = $dc00 			; joystick port 2 input register
002E6D  2               NOJOY  = $ff 			; value for no joy input
002E6D  2               
002E6D  2               GetJoyInput:
002E6D  2  AD 3A 2E     	lda inputResult
002E70  2  85 83        	sta keyPressed
002E72  2               
002E72  2  A9 FF        	lda #NOINPUT 		; assume there is no input
002E74  2  8D 3A 2E     	sta inputResult
002E77  2               
002E77  2  A5 83        	lda keyPressed 		; load the input byte
002E79  2  CD D0 2E     	cmp previousJoy 	; same as previous input?
002E7C  2  D0 06        	bne skip41 		; no, so @skip delay
002E7E  2               joyDelay:
002E7E  2  CE CE 2E     	dec inputDelayCounter	; update delay
002E81  2  F0 01        	beq skip41		; continue if delay complete
002E83  2  60           	rts
002E84  2               skip41:
002E84  2  A2 0F        	ldx #INPUTDELAY 	; reset the delay counter
002E86  2  8E CE 2E     	stx inputDelayCounter
002E89  2               
002E89  2  8D D0 2E     	sta previousJoy 	; save this input value
002E8C  2               ;	cmp #NOJOY 		; same as noinput?
002E8C  2               ;	bne nextjoy1 		; no, so go check the possiblities
002E8C  2               
002E8C  2               ;	lda #NOINPUT 		; there is no input, store it
002E8C  2               ;	sta inputResult 	; in result
002E8C  2               ;	rts
002E8C  2               nextjoy1:
002E8C  2               ;	clc 			; clear the carry bit
002E8C  2               ;	lsr 			; check bit 0: joy up
002E8C  2               ;	bcs nextjoy2
002E8C  2               
002E8C  2  A2 02        	ldx #2
002E8E  2  20 3F 38     	jsr readinput
002E91  2  C9 0D        	cmp #TURNCOUNTER 	; store the correct code ...
002E93  2  D0 04        	bne nextjoy2
002E95  2               
002E95  2  8D 3A 2E     	sta inputResult 	; as result
002E98  2  60           	rts
002E99  2               nextjoy2:
002E99  2               ;	lsr 			; check bit 1: joy down
002E99  2               ;	bcs nextjoy3 		; bit set means not pressed
002E99  2               
002E99  2  A2 03        	ldx #3
002E9B  2  20 3F 38     	jsr readinput
002E9E  2  C9 0A        	cmp #TURNCLOCK	 	; store the correct code ...
002EA0  2  D0 04        	bne nextjoy3
002EA2  2               
002EA2  2  8D 3A 2E     	sta inputResult
002EA5  2  60           	rts
002EA6  2               nextjoy3:
002EA6  2               ;	lsr 			; check bit 2: joy left
002EA6  2               ;	bcs nextjoy4
002EA6  2               
002EA6  2  A2 00        	ldx #0
002EA8  2  20 3F 38     	jsr readinput
002EAB  2  C9 2F        	cmp #LEFT	 	; store the correct code ...
002EAD  2  D0 04        	bne nextjoy4
002EAF  2               
002EAF  2  8D 3A 2E     	sta inputResult
002EB2  2  60           	rts
002EB3  2               nextjoy4:
002EB3  2               ;	lsr 			; check bit 3: joy right
002EB3  2               ;	bcs nextjoy5
002EB3  2               
002EB3  2  A2 01        	ldx #1
002EB5  2  20 3F 38     	jsr readinput
002EB8  2  C9 2C        	cmp #RIGHT	 	; store the correct code ...
002EBA  2  D0 04        	bne nextjoy5
002EBC  2               
002EBC  2  8D 3A 2E     	sta inputResult
002EBF  2  60           	rts
002EC0  2               nextjoy5:
002EC0  2               ;	lsr 			; check bit 4: joy fire button
002EC0  2               ;	bcs nextjoy6
002EC0  2               
002EC0  2  A2 04        	ldx #4
002EC2  2  20 3F 38     	jsr readinput
002EC5  2  C9 01        	cmp #DOWN	 	; store the correct code ...
002EC7  2  D0 04        	bne nextjoy6
002EC9  2               
002EC9  2  8D 3A 2E     	sta inputResult
002ECC  2  60           	rts
002ECD  2               nextjoy6:
002ECD  2  60           	rts 			; those were all the relevant bits.
002ECE  2               				; if we get to this, NOINPUT is still
002ECE  2               				; stored in inputResult.
002ECE  2               
002ECE  2               ; ------------------------------------------------
002ECE  2               
002ECE  2               inputDelayCounter:
002ECE  2  0F           	.byte INPUTDELAY	; if this reaches 0, the player input is read
002ECF  2               
002ECF  2               previousKey:
002ECF  2  01           	.byte DOWN		; previous key held
002ED0  2               
002ED0  2               previousJoy:
002ED0  2  FF           	.byte 255 		; previous joy direction held
002ED1  2               
002ED1  2               
002ED1  1               	.include "lines.inc"
002ED1  2               L0400	= $4D00
002ED1  2               L0500	= L0400+$100
002ED1  2               L0600	= L0500+$100
002ED1  2               L0700	= L0600+$100
002ED1  2               
002ED1  2               ; code concerning game screens
002ED1  2               
002ED1  2               ; game screen dimensions
002ED1  2               screenWidth 	= 21
002ED1  2               screenHeight 	= 21
002ED1  2               
002ED1  2               
002ED1  2               ; ----------------------------------------------
002ED1  2               
002ED1  2               ; subroutine to clear the screen and color ram
002ED1  2               ; also detroys sprite pointers.
002ED1  2               ClearScreen:
002ED1  2               
002ED1  2  A9 80        	lda #>$8000
002ED3  2  8D DB 2E     	sta clr_loop+2
002ED6  2               
002ED6  2               clr_start:
002ED6  2  A9 00        	lda #$00 		; reset offset register
002ED8  2  AA           	tax
002ED9  2               clr_loop:
002ED9  2  9D 00 80     	sta $8000,x
002EDC  2  E8           	inx 			; increment counter
002EDD  2  D0 FA        	bne clr_loop 		; continue?
002EDF  2               
002EDF  2  EE DB 2E     	inc clr_loop+2
002EE2  2  AD DB 2E     	lda clr_loop+2
002EE5  2  C9 98        	cmp #$98
002EE7  2  D0 ED        	bne clr_start
002EE9  2               
002EE9  2  A2 00        	ldx #$00 		; reset offset register
002EEB  2               clr_shadow:
002EEB  2  A9 20        	lda #$20		; #$20 is space
002EED  2  9D 00 4D     	sta L0400,x 		; store in screen ram
002EF0  2  9D 00 4E     	sta L0500,x
002EF3  2  9D 00 4F     	sta L0600,x
002EF6  2  9D 00 50     	sta L0700,x
002EF9  2  E8           	inx
002EFA  2  D0 EF        	bne clr_shadow		; continue?
002EFC  2               
002EFC  2  60           	rts
002EFD  2               
002EFD  2               ; ---------------------------------------------
002EFD  2               
002EFD  2               ; this subroutine saves the content of the total play area
002EFD  2               ; into a buffer.
002EFD  2               ; If playAreaErase is set to 1 then the area is cleared as well
002EFD  2               
002EFD  2               SavePlayArea:
002EFD  2               	; point to the beginning of the first row
002EFD  2               
002EFD  2  A2 0C        	ldx #12  		; x position is set to 12
002EFF  2  A0 00        	ldy #0	 		; y position to 0
002F01  2  20 66 2A     	jsr SetScreenPointer 	; set screen memory pointer
002F04  2  A9 0C        	lda #12
002F06  2  8D 09 30     	sta blk_x
002F09  2  A9 00        	lda #0
002F0B  2  8D 0A 30     	sta blk_y
002F0E  2               
002F0E  2  A2 00        	ldx #$00		; reset buffer pointer
002F10  2  8E 70 32     	stx currentRow 		; reset the row counter
002F13  2               @loop1:
002F13  2  B1 80        	lda (screenPointer),y 	; get screen data
002F15  2  9D 0C 30     	sta playAreaBuffer,x 	; store it in the buffer
002F18  2  AD 0B 30     	lda playAreaErase 	; erase it as well?
002F1B  2  F0 07        	beq @skip1 		; no
002F1D  2  A9 20        	lda #$20 		; write a space
002F1F  2  91 80        	sta (screenPointer),y
002F21  2  20 23 2E     	jsr displayblock
002F24  2               @skip1:
002F24  2  EE 09 30     	inc blk_x
002F27  2  E8           	inx 			; update buffer pointer
002F28  2  C8           	iny  			; update row character counter
002F29  2  C0 0A        	cpy #10 		; stored whole line?
002F2B  2  D0 E6        	bne @loop1 		; no, keep reading
002F2D  2               
002F2D  2  EE 70 32     	inc currentRow 		; go to the next row
002F30  2  AD 70 32     	lda currentRow 		; what value is it now?
002F33  2  C9 14        	cmp #20 		; all 20 rows checked?
002F35  2  F0 10        	beq @skip2	 	; yes, exit
002F37  2  20 7E 2A     	jsr DownOneRow 		; no, go one row down
002F3A  2  EE 0A 30     	inc blk_y
002F3D  2  A0 00        	ldy #$00 		; reset row character counter
002F3F  2  A9 0C        	lda #12
002F41  2  8D 09 30     	sta blk_x
002F44  2  4C 13 2F     	jmp @loop1	 	; do next row
002F47  2               @skip2:
002F47  2  60           	rts
002F48  2               
002F48  2               ; ---------------------------------------------
002F48  2               
002F48  2               ; restores the play area by reading the buffer
002F48  2               
002F48  2               RestorePlayArea:
002F48  2  A2 0C        	ldx #12
002F4A  2  A0 00        	ldy #0
002F4C  2  20 66 2A     	jsr SetScreenPointer
002F4F  2  A9 0C        	lda #12
002F51  2  8D 09 30     	sta blk_x
002F54  2  A9 00        	lda #0
002F56  2  8D 0A 30     	sta blk_y
002F59  2               
002F59  2  A2 00        	ldx #$00 		; reset buffer counter
002F5B  2  8E 70 32     	stx currentRow 		; and row index
002F5E  2               @loop1:
002F5E  2  BD 0C 30     	lda playAreaBuffer,x 	; get buffer data
002F61  2  91 80        	sta (screenPointer),y 	; store on screen
002F63  2  20 23 2E     	jsr displayblock
002F66  2               @skip1:
002F66  2  EE 09 30     	inc blk_x
002F69  2  E8           	inx 			; update buffer pointer
002F6A  2  C8           	iny  			; update row character counter
002F6B  2  C0 0A        	cpy #10 		; done whole line?
002F6D  2  D0 EF        	bne @loop1 		; no
002F6F  2               
002F6F  2  EE 70 32     	inc currentRow 		; go to the next row
002F72  2  AD 70 32     	lda currentRow 		; what value is it now?
002F75  2  C9 14        	cmp #20 		; all 20 rows checked?
002F77  2  F0 10        	beq @skip2	 	; yes, exit
002F79  2  20 7E 2A     	jsr DownOneRow 		; no, go one row down
002F7C  2  EE 0A 30     	inc blk_y
002F7F  2  A0 00        	ldy #$00 		; reset row character counter
002F81  2  A9 0C        	lda #12
002F83  2  8D 09 30     	sta blk_x
002F86  2  4C 5E 2F     	jmp @loop1	 	; do next row
002F89  2               @skip2:
002F89  2  60           	rts
002F8A  2               
002F8A  2               ; ------------------------------------------------
002F8A  2               
002F8A  2               ; this routine will copy data to another memory location
002F8A  2               ; in this case the screen memory
002F8A  2               ; source and dimensions must be set before calling this
002F8A  2               
002F8A  2               WriteScreenData:
002F8A  2               	; get the source address
002F8A  2               
002F8A  2  AD 00 30     	lda dataSourceLo
002F8D  2  8D B5 2F     	sta read+1
002F90  2  AD FF 2F     	lda dataSourceHi
002F93  2  8D B6 2F     	sta read+2
002F96  2               
002F96  2               	; get the destination address
002F96  2  AD 04 30     	lda dataDestinationLo
002F99  2  8D B9 2F     	sta write+1
002F9C  2  AD 03 30     	lda dataDestinationHi
002F9F  2  8D BA 2F     	sta write+2
002FA2  2               
002FA2  2  AD 04 30     	lda dataDestinationLo
002FA5  2  38           	sec
002FA6  2  E9 05        	sbc #5
002FA8  2  8D 09 30     	sta blk_x
002FAB  2  A9 02        	lda #2
002FAD  2  8D 0A 30     	sta blk_y
002FB0  2               
002FB0  2  A2 00        	ldx #$00 			; reset read index
002FB2  2  A0 00        	ldy #$00 			; reset write index
002FB4  2               
002FB4  2               	; start copy
002FB4  2               read:
002FB4  2  BD 00 10     	lda $1000,x 			; get data
002FB7  2  48           	pha
002FB8  2               write:
002FB8  2  99 00 10     	sta $1000,y 			; store at destination
002FBB  2               
002FBB  2  AD 09 30     	lda blk_x
002FBE  2  8D 84 00     	sta XPOS
002FC1  2  AD 0A 30     	lda blk_y
002FC4  2  8D 85 00     	sta YPOS
002FC7  2  68           	pla
002FC8  2  20 EE 37     	jsr chrout
002FCB  2               
002FCB  2  E8           	inx 				; update read counter
002FCC  2  D0 03        	bne @skip1 			; roll over?
002FCE  2  EE B6 2F     	inc read+2  			; yes. go to next memory page
002FD1  2               @skip1:
002FD1  2  EE 09 30     	inc blk_x
002FD4  2  C8           	iny 				; update row counter
002FD5  2  CC 01 30     	cpy dataWidth			; this row done?
002FD8  2  D0 DA        	bne read 	 		; no, continue
002FDA  2               
002FDA  2  EE 0A 30     	inc blk_y
002FDD  2  A0 00        	ldy #$00 			; reset the row counter
002FDF  2               
002FDF  2  AD 04 30     	lda dataDestinationLo
002FE2  2  38           	sec
002FE3  2  E9 05        	sbc #5
002FE5  2  8D 09 30     	sta blk_x
002FE8  2  AD B9 2F     	lda write+1 			; get lo byte of current screen position
002FEB  2  18           	clc
002FEC  2  69 28        	adc #40 			; add 40 to that, goto next row
002FEE  2  90 03        	bcc @skip2 			; overflow?
002FF0  2  EE BA 2F     	inc write+2  			; then go to next memory page
002FF3  2               @skip2:
002FF3  2  8D B9 2F     	sta write+1 			; store lo byte
002FF6  2               
002FF6  2  CE 02 30     	dec dataHeight 			; update counter
002FF9  2  AD 02 30     	lda dataHeight
002FFC  2  D0 B6        	bne read 			; not all rows done yet
002FFE  2  60           	rts
002FFF  2               
002FFF  2               ; where is the data coming from?
002FFF  2               dataSourceHi:
002FFF  2  00           	.byte 0
003000  2               dataSourceLo:
003000  2  00           	.byte 0
003001  2               
003001  2               ; what is the data size?
003001  2               dataWidth:
003001  2  00           	.byte 0
003002  2               dataHeight:
003002  2  00           	.byte 0
003003  2               
003003  2               ; where does it need to go?
003003  2               ; this is a screen memory location
003003  2               dataDestinationHi:
003003  2  00           	.byte 0
003004  2               dataDestinationLo:
003004  2  00           	.byte 0
003005  2               
003005  2               tmp_x:
003005  2  00           	.byte 0
003006  2               tmp_y:
003006  2  00           	.byte 0
003007  2               row_cnt:
003007  2  00           	.byte 0
003008  2               col_cnt:
003008  2  00           	.byte 0
003009  2               blk_x:
003009  2  00           	.byte 0
00300A  2               blk_y:
00300A  2  00           	.byte 0
00300B  2               
00300B  2               ; -----------------------------------------------
00300B  2               
00300B  2               playAreaErase:
00300B  2  00           	.byte 0
00300C  2               
00300C  2               playAreaBuffer:
00300C  2  00 00 00 00  	.repeat 10*20
003010  2  00 00 00 00  
003014  2  00 00 00 00  
0030D4  2               	  .byte 0
0030D4  2               	.endrep
0030D4  2               
0030D4  1               	.include "scores.inc"
0030D4  2               
0030D4  2               
0030D4  2               ; code concerning made lines
0030D4  2               
0030D4  2               flashDelay 	= 10 			; delay in frames.
0030D4  2               flashTime 	= flashDelay * 6 	; how long to flash. 3 times.
0030D4  2               
0030D4  2               ResetLinesMade:
0030D4  2  A9 00        	lda #$00
0030D6  2  8D 6E 32     	sta linesTotal
0030D9  2  8D 6F 32     	sta linesTotal+1
0030DC  2  60           	rts
0030DD  2               
0030DD  2               
0030DD  2               ; adds the linesMade value to the total lines made value on the screen.
0030DD  2               AddLinesTotal:
0030DD  2  F8           	sed 				; set decimal mode
0030DE  2  18           	clc 				; clear the carry bit
0030DF  2  AD 6E 32     	lda linesTotal+0  		; get current total lines value
0030E2  2  6D 6D 32     	adc linesMade   		; add the made lines.
0030E5  2  8D 6E 32     	sta linesTotal+0 		; store it.
0030E8  2  AD 6F 32     	lda linesTotal+1 		; and the 2nd byte.
0030EB  2  69 00        	adc #$00 			; always 0, we can add 4 lines max.
0030ED  2  8D 6F 32     	sta linesTotal+1
0030F0  2  D8           	cld 				; clear decimal mode
0030F1  2  60           	rts
0030F2  2               
0030F2  2               
0030F2  2               ;this updates the LINES value on screen
0030F2  2               PrintTotalLinesMade:
0030F2  2               
0030F2  2  18           	clc 				; position cursor
0030F3  2  A2 0E        	ldx #12+2
0030F5  2  A0 15        	ldy #26-5
0030F7  2  20 E9 37     	jsr plot
0030FA  2               
0030FA  2               	; do 1st byte.
0030FA  2               	; only do the first 4 bits of this byte
0030FA  2               
0030FA  2  AD 6F 32     	lda linesTotal+1
0030FD  2  29 0F        	and #%00001111 			; get rid of leftmost bits
0030FF  2  18           	clc
003100  2  69 30        	adc #$30 			; create a screen code
003102  2  20 EE 37     	jsr chrout 			; print it
003105  2  EE 84 00     	inc XPOS
003108  2               
003108  2               	; do 2nd byte
003108  2               
003108  2  AD 6E 32     	lda linesTotal
00310B  2  48           	pha 				; push to stack
00310C  2  4A           	lsr 				; shift 4 times to right
00310D  2  4A           	lsr
00310E  2  4A           	lsr
00310F  2  4A           	lsr
003110  2  18           	clc
003111  2  69 30        	adc #$30 			; add #$30 to it to get a screencode
003113  2  20 EE 37     	jsr chrout 			; print it
003116  2  EE 84 00     	inc XPOS
003119  2  68           	pla 				; restore value
00311A  2  29 0F        	and #%00001111 			; get rid of leftmost bits
00311C  2  18           	clc
00311D  2  69 30        	adc #$30 			; create a screen code
00311F  2  20 EE 37     	jsr chrout 			; print it
003122  2  60           	rts
003123  2               
003123  2               
003123  2               
003123  2               ; this function will check for lines made.
003123  2               ; it is called before a new block is created.
003123  2               
003123  2               CheckLines:
003123  2  A9 00        	lda #$00
003125  2  8D 6D 32     	sta linesMade 			; reset the score
003128  2  8D 70 32     	sta currentRow 			; reset the row counter
00312B  2               
00312B  2               	; point to the beginning of the first row
00312B  2               
00312B  2  A2 0C        	ldx #12 			; x position is set to 12
00312D  2  A0 00        	ldy #0 				; y position to 0
00312F  2  20 66 2A     	jsr SetScreenPointer 		; set screen memory pointer
003132  2               
003132  2  A2 00        	ldx #$00 			; reset memory buffer pointer
003134  2               readStart:
003134  2  A0 00        	ldy #$00			; reset row character counter
003136  2               @loop1:
003136  2  B1 80        	lda (screenPointer),y 		; get row character
003138  2  C9 20        	cmp #$20 			; is it a space?
00313A  2  F0 32        	beq nextRow 			; yes, this row is not complete so go to the next
00313C  2  C8           	iny 				; no, so update row character counter
00313D  2  C0 0A        	cpy #10 			; checked all 10 characters in a row?
00313F  2  D0 F5        	bne @loop1			; no, continue this row
003141  2               
003141  2               	; whole row checked and no space found: we made a line!
003141  2               
003141  2  AC 6D 32     	ldy linesMade 			; get index for this made line
003144  2  AD 70 32     	lda currentRow 			; save the row number in ...
003147  2  99 75 32     	sta lineRowNumbers,y 		; memory, using this index
00314A  2               
00314A  2               	; lets save the row screen data into a buffer
00314A  2               
00314A  2  A0 00        	ldy #$00 			; start at begin of line
00314C  2               @loop2:
00314C  2  B1 80        	lda (screenPointer),y 		; get screen data
00314E  2  9D 79 32     	sta madeLinesData,x 		; store it in the buffer
003151  2  E8           	inx 				; update buffer pointer
003152  2  C8           	iny  				; update row character counter
003153  2  C0 0A        	cpy #10 			; stored all 10 characters?
003155  2  D0 F5        	bne @loop2 			; no, keep reading the line
003157  2               
003157  2  A9 03        	lda #SND_LINE
003159  2  20 75 5F     	jsr playsound
00315C  2               
00315C  2  EE 6D 32     	inc linesMade 			; add line to score
00315F  2  AD 6D 32     	lda linesMade 			; get amount of lines made so far
003162  2  C9 04        	cmp #4 				; have we done 4?
003164  2  D0 08        	bne nextRow
003166  2               
003166  2  A9 04        	lda #SND_TETRIS
003168  2  20 75 5F     	jsr playsound
00316B  2               
00316B  2  4C 7E 31     	jmp readDone			; yes. all done.
00316E  2               nextRow:
00316E  2  EE 70 32     	inc currentRow 			; go to the next row
003171  2  AD 70 32     	lda currentRow 			; what value is it now?
003174  2  C9 14        	cmp #20 			; all 20 rows checked?
003176  2  F0 06        	beq readDone 			; yes, @exit
003178  2  20 7E 2A     	jsr DownOneRow 			; no, go one row down. adjust screenPointer.
00317B  2  4C 34 31     	jmp readStart 			; do next row
00317E  2               readDone:
00317E  2  AD 6D 32     	lda linesMade 			; did we make lines?
003181  2  F0 05        	beq @skip1 			; no, then @exit
003183  2  A9 3C        	lda #flashTime 			; yes. so set flash delay ...
003185  2  8D 74 32     	sta totalFlashDelay 		; counter which we check in the main@loop.
003188  2               @skip1:
003188  2  60           	rts
003189  2               
003189  2               
003189  2               ; this function will flash the made lines
003189  2               
003189  2               FlashLines:
003189  2  CE 74 32     	dec totalFlashDelay		; update total flash time counter.
00318C  2               
00318C  2  CE 72 32     	dec currentFlashDelay 		; update flash delay counter
00318F  2  F0 01        	beq @skip2			; ready to update?
003191  2  60           	rts 				; no
003192  2               @skip2:
003192  2  A9 0A        	lda #flashDelay			; restore the flash delay counter ...
003194  2  8D 72 32     	sta currentFlashDelay   	; ... to its default value
003197  2               
003197  2  A9 00        	lda #$00			; reset the line/row count
003199  2  8D 71 32     	sta currentLineIndex 		; this is the index of the line we're currently handling
00319C  2               
00319C  2  AD 73 32     	lda lineFlashFlag 		; get line display flag
00319F  2  49 01        	eor #%00000001 			; toggle bit 0
0031A1  2  8D 73 32     	sta lineFlashFlag 		; store flag
0031A4  2               
0031A4  2               	; start modifying screen data to show the lines flashing
0031A4  2               
0031A4  2  A2 00        	ldx #$00 			; reset screen buffer memory pointer
0031A6  2               updateLine:
0031A6  2  8A           	txa 				; save mem buffer index to
0031A7  2  48           	pha 				; the stack
0031A8  2               
0031A8  2  AC 71 32     	ldy currentLineIndex 		; get the index if the line we are going to show/hide
0031AB  2  B9 75 32     	lda lineRowNumbers,y 		; get row number of made line
0031AE  2  A8           	tay 				; set y register
0031AF  2               
0031AF  2  8D 0A 30     	sta blk_y
0031B2  2               
0031B2  2  A2 0C        	ldx #12 			; set x position
0031B4  2               
0031B4  2  8E 09 30     	stx blk_x
0031B7  2               
0031B7  2  20 66 2A     	jsr SetScreenPointer 		; set screenpointer to this position
0031BA  2               	
0031BA  2  68           	pla 				; retrieve mem buffer index from
0031BB  2  AA           	tax 				; the stack
0031BC  2               
0031BC  2  A0 00        	ldy #$00 			; reset line character counter
0031BE  2               
0031BE  2  AD 73 32     	lda lineFlashFlag 		; show or hide the lines?
0031C1  2  D0 14        	bne hide 			; branch to hide
0031C3  2               
0031C3  2               show:
0031C3  2  BD 79 32     	lda madeLinesData,x 		; get screen data from memory
0031C6  2  91 80        	sta (screenPointer),y 		; store on screen
0031C8  2               
0031C8  2  20 23 2E     	jsr displayblock
0031CB  2               
0031CB  2  EE 09 30     	inc blk_x
0031CE  2               
0031CE  2  E8           	inx 				; update screen data pointer
0031CF  2  C8           	iny 				; update character counter
0031D0  2  C0 0A        	cpy #10 			; 10 chars done?
0031D2  2  D0 EF        	bne show 			; no, keep printing
0031D4  2  4C E6 31     	jmp gotoNextLine 		; line is complete. continue to next line
0031D7  2               hide:
0031D7  2  A9 20        	lda #$20 			; load a space
0031D9  2  91 80        	sta (screenPointer),y 		; store on screen
0031DB  2               
0031DB  2  20 23 2E     	jsr displayblock
0031DE  2  EE 09 30     	inc blk_x
0031E1  2               
0031E1  2  C8           	iny 				; update character counter
0031E2  2  C0 0A        	cpy #10 			; 10 chars done?
0031E4  2  D0 F1        	bne hide 			; not yet.
0031E6  2               
0031E6  2               	; line is complete. continue to next line
0031E6  2               
0031E6  2               gotoNextLine:
0031E6  2  EE 0A 30     	inc blk_y
0031E9  2               
0031E9  2  EE 71 32     	inc currentLineIndex 		; update counter
0031EC  2  AD 71 32     	lda currentLineIndex 		; how many lines did we do?
0031EF  2  CD 6D 32     	cmp linesMade 			; same as total made?
0031F2  2  F0 03        	beq @exitFlashLines		; yes. all done
0031F4  2  4C A6 31     	jmp updateLine 		 	; start next line
0031F7  2               
0031F7  2               @exitFlashLines:
0031F7  2  60           	rts
0031F8  2               
0031F8  2               
0031F8  2               ;removes made lines from the playfield
0031F8  2               RemoveLines:
0031F8  2  A9 00        	lda #$00 			; reset the index to the line
0031FA  2  8D 71 32     	sta currentLineIndex 		; we are modifying
0031FD  2               
0031FD  2               	; get the row number of the line we need to remove
0031FD  2               setPointers:
0031FD  2  AE 71 32     	ldx currentLineIndex		; get index of current line
003200  2  BD 75 32     	lda lineRowNumbers,x 		; get the row number of current line
003203  2  A8           	tay 				; put in .Y register
003204  2  20 16 32     	jsr SetLinePointers 		; set screen memory pointers. assumes .Y has been set
003207  2  20 28 32     	jsr MoveLineData 		; move the data. empty row is added at the top.
00320A  2               
00320A  2               	; do the next line
00320A  2               
00320A  2  EE 71 32     	inc currentLineIndex 		; update the line index
00320D  2  AD 71 32     	lda currentLineIndex 		; how many have we done?
003210  2  CD 6D 32     	cmp linesMade  			; done all the made lines?
003213  2  D0 E8        	bne setPointers 		; no. continue
003215  2  60           	rts
003216  2               
003216  2               
003216  2               ; this sets the screen memory pointers to the made line
003216  2               ; and the line above it so data can be moved.
003216  2               ; set .Y to the row to point to before calling this routine.
003216  2               
003216  2               SetLinePointers:
003216  2  A2 0C        	ldx #12 			; set horizontal position
003218  2               
003218  2               	; first, set pointer2 to one row above the
003218  2               	; the row number in .Y
003218  2  88           	dey 		; go up one row
003219  2  20 66 2A     	jsr SetScreenPointer 		; set screen pointer
00321C  2  A5 80        	lda screenPointer
00321E  2  85 82        	sta screenPointer2 		; copy values to pointer2
003220  2  A5 81        	lda screenPointer+1
003222  2  85 83        	sta screenPointer2+1
003224  2  20 7E 2A     	jsr DownOneRow 			; set pointer1 to the row below
003227  2  60           	rts
003228  2               
003228  2               
003228  2               ; this routine will move data down until the top of the screen ...
003228  2               ; has been reached. a clear line is added at the top.
003228  2               
003228  2               MoveLineData:
003228  2               	; get value of starting row
003228  2               
003228  2  AC 71 32     	ldy currentLineIndex 		; get index of line we're moving data into
00322B  2  B9 75 32     	lda lineRowNumbers,y 		; and then get the start row number
00322E  2  AA           	tax 				; move row value to .X
00322F  2  8D 0A 30     	sta blk_y
003232  2               
003232  2               	; move the data
003232  2               	; until top of screen has been reached.
003232  2               
003232  2               startloop1:
003232  2  A0 00        	ldy #0 				; reset line character counter
003234  2  A9 0C        	lda #6+6
003236  2  8D 09 30     	sta blk_x
003239  2               @loop3:
003239  2  B1 82        	lda (screenPointer2),y 		; get data from row above made line
00323B  2  91 80        	sta (screenPointer),y 		; store it in the made line
00323D  2               
00323D  2  20 23 2E     	jsr displayblock
003240  2  EE 09 30     	inc blk_x
003243  2               
003243  2  C8           	iny
003244  2  C0 0A        	cpy #10
003246  2  D0 F1        	bne @loop3 			; all 10 done? no, then go back
003248  2               
003248  2               	; go up one row
003248  2               
003248  2  CE 0A 30     	dec blk_y
00324B  2               
00324B  2  CA           	dex 				; update row number to the one above
00324C  2  F0 0B        	beq @skip3 			; we don't need to do row 0
00324E  2  8A           	txa 				; move the row number ...
00324F  2  A8           	tay 				; to .Y
003250  2               
003250  2  48           	pha 				; save row number as next call uses .X
003251  2               
003251  2  20 16 32     	jsr SetLinePointers 		; update pointers
003254  2               
003254  2  68           	pla 				; get row number back
003255  2  AA           	tax 				; and move to .X
003256  2               
003256  2  4C 32 32     	jmp startloop1 		; do the next row
003259  2               @skip3:
003259  2               	; done moving data, clear the top row
003259  2               
003259  2  A2 0C        	ldx #12
00325B  2  A0 00        	ldy #0
00325D  2  20 66 2A     	jsr SetScreenPointer 		; point to the top row
003260  2               
003260  2  A0 00        	ldy #0 				; reset char counter
003262  2  A9 20        	lda #$20 			; load a space
003264  2               @loop4:
003264  2  91 80        	sta (screenPointer),y 		; store on screen
003266  2  C8           	iny 				; update char counter
003267  2  C0 0A        	cpy #10
003269  2  D0 F9        	bne @loop4 			; all done? no continue
00326B  2               @exit1:
00326B  2  60           	rts
00326C  2               
00326C  2               
00326C  2               
00326C  2               ; ---------------------------------------------------------
00326C  2               
00326C  2               rowsToCheck:
00326C  2  00           	.byte 0 			; amount of rows left to check for lines. this is set to 20 when starting.
00326D  2               
00326D  2               linesMade:
00326D  2  00           	.byte 0 			; amount of lines made after dropping a block
00326E  2               
00326E  2               linesTotal:
00326E  2  00 00        	.byte 0,0 			; total of lines made in this game so far, LSB first
003270  2               	
003270  2               currentRow:
003270  2  00           	.byte 0 			; we're currently at this row
003271  2               
003271  2               currentLineIndex:
003271  2  00           	.byte 0 			; index to the line we're currenly showing or hinding.
003272  2               
003272  2               currentFlashDelay:
003272  2  0A           	.byte flashDelay 		; delay between flashing the lines, set to its default const value
003273  2               
003273  2               lineFlashFlag:
003273  2  00           	.byte 0 			; flag to indicate line hide or show.
003274  2               
003274  2               totalFlashDelay: 			; flashing takes this amount of time. we flash 3 times.
003274  2  00           	.byte 0
003275  2               
003275  2               lineRowNumbers:
003275  2  00 00 00 00  	.repeat 4 			; row numbers of made lines. 4 bytes.
003279  2               	  .byte 0
003279  2               	.endrep
003279  2               madeLinesData:
003279  2  00 00 00 00  	.repeat 40 			; memory reservation to save line data. max 4 lines of 10 chars wide
00327D  2  00 00 00 00  
003281  2  00 00 00 00  
0032A1  2               	  .byte 0
0032A1  2               	.endrep
0032A1  2               
0032A1  1               	.include "random.inc"
0032A1  2               
0032A1  2               
0032A1  2               ; code concerning the player score
0032A1  2               
0032A1  2               
0032A1  2               
0032A1  2               ; resets player score and total lines made.
0032A1  2               ResetScore:
0032A1  2  A9 00        	lda #$00
0032A3  2  8D 52 33     	sta score+0
0032A6  2  8D 53 33     	sta score+1
0032A9  2  8D 54 33     	sta score+2
0032AC  2  60           	rts
0032AD  2               
0032AD  2               
0032AD  2               ; this adds the score that is put in the
0032AD  2               ; addition bytes.
0032AD  2               AddScore:
0032AD  2  F8           	sed 			; set decimal mode
0032AE  2  18           	clc 			; clear the carry bit
0032AF  2  AD 52 33     	lda score+0 		; get this score
0032B2  2  6D 55 33     	adc addition+0 		; add the first byte
0032B5  2  8D 52 33     	sta score+0 		; store it.
0032B8  2  AD 53 33     	lda score+1 		; and the 2nd byte
0032BB  2  6D 56 33     	adc addition+1
0032BE  2  8D 53 33     	sta score+1
0032C1  2  AD 54 33     	lda score+2		; and the 3rd byte
0032C4  2  6D 57 33     	adc addition+2
0032C7  2  8D 54 33     	sta score+2
0032CA  2  D8           	cld 			; clear decimal mode
0032CB  2  60           	rts
0032CC  2               
0032CC  2               
0032CC  2               ; prints the score into the playing field
0032CC  2               PrintScore:
0032CC  2               
0032CC  2               	; set cursor position
0032CC  2  18           	clc 			; clear carry bit so we set cursor
0032CD  2  A2 06        	ldx #4+2 			; row 4
0032CF  2  A0 13        	ldy #24-5 		; column 24
0032D1  2  20 E9 37     	jsr plot 		; move cursor so we can use chrout
0032D4  2               
0032D4  2  A9 52        	lda #<score
0032D6  2  8D E1 32     	sta ploop1+1
0032D9  2  A9 33        	lda #>score
0032DB  2  8D E2 32     	sta ploop1+2
0032DE  2               
0032DE  2               PrintHighScore:
0032DE  2  A2 02        	ldx #$02 		; start with right most byte
0032E0  2               ploop1:
0032E0  2  BD 52 33     	lda score,x 		; get the msb
0032E3  2  48           	pha 			; push to stack
0032E4  2  4A           	lsr 			; shift 4 times to right
0032E5  2  4A           	lsr
0032E6  2  4A           	lsr
0032E7  2  4A           	lsr
0032E8  2  18           	clc
0032E9  2  69 30        	adc #$30 		; add #$30 to it to get a screencode
0032EB  2  20 EE 37     	jsr chrout 		; print it
0032EE  2  EE 84 00     	inc XPOS
0032F1  2  68           	pla 			; restore value
0032F2  2  29 0F        	and #%00001111 		; get rid of leftmost bits
0032F4  2  18           	clc
0032F5  2  69 30        	adc #$30 		; create a screen code
0032F7  2  20 EE 37     	jsr chrout 		; print it
0032FA  2  EE 84 00     	inc XPOS
0032FD  2  CA           	dex 			; update counter
0032FE  2  10 E0        	bpl ploop1 		; continue
003300  2  60           	rts
003301  2               
003301  2               
003301  2               ; this looks at the made lines amount, and the current
003301  2               ; level, and adds the appropriate score: (level+1) * line score
003301  2               AddLineScore:
003301  2  AC 6D 32     	ldy linesMade 		; get made lines amount
003304  2  88           	dey 			; minus 1 to get currect offset to lineScore array
003305  2  B9 58 33     	lda lineScore1,y 	; get 1st byte
003308  2  8D 55 33     	sta addition+0 		; put in addition
00330B  2  B9 5C 33     	lda lineScore2,y 	; same for middle byte
00330E  2  8D 56 33     	sta addition+1
003311  2  B9 60 33     	lda lineScore3,y 	; and last byte
003314  2  8D 57 33     	sta addition+2
003317  2               
003317  2  AE 6A 35     	ldx currentLevel 	; get the current player level
00331A  2               				; this is how many times the score is added
00331A  2               @loop2:
00331A  2  20 AD 32     	jsr AddScore 		; add the score
00331D  2  CA           	dex
00331E  2  10 FA        	bpl @loop2 		; keep doing this until all levels have been added
003320  2  60           	rts
003321  2               
003321  2               
003321  2               
003321  2               
003321  2               ;prints the current play level on the screen
003321  2               PrintLevel:
003321  2  18           	clc 			; position cursor at 26,8
003322  2  A2 0A        	ldx #8+2
003324  2  A0 15        	ldy #26-5
003326  2  20 E9 37     	jsr plot
003329  2               
003329  2               	; do 1st byte.
003329  2               	; only do the first 4 bits of this byte
003329  2               
003329  2  AD 6C 35     	lda gameLevel+1
00332C  2  29 0F        	and #%00001111 		; get rid of leftmost bits
00332E  2  18           	clc
00332F  2  69 30        	adc #$30 		; create a screen code
003331  2  20 EE 37     	jsr chrout 		; print it
003334  2  EE 84 00     	inc XPOS
003337  2               
003337  2               	; do 2nd byte
003337  2               
003337  2  AD 6B 35     	lda gameLevel+0
00333A  2  48           	pha 			; push to stack
00333B  2  4A           	lsr 			; shift 4 times to right
00333C  2  4A           	lsr
00333D  2  4A           	lsr
00333E  2  4A           	lsr
00333F  2  18           	clc
003340  2  69 30        	adc #$30 		; add #$30 to it to get a screencode
003342  2  20 EE 37     	jsr chrout 		; print it
003345  2  EE 84 00     	inc XPOS
003348  2               
003348  2  68           	pla 			; restore value
003349  2  29 0F        	and #%00001111 		; get rid of leftmost bits
00334B  2  18           	clc
00334C  2  69 30        	adc #$30 		; create a screen code
00334E  2  20 EE 37     	jsr chrout 		; print it
003351  2  60           	rts
003352  2               
003352  2               
003352  2               
003352  2               ; ---------------------------
003352  2               
003352  2               score:
003352  2  00 00 00     	.byte 0,0,0 		; 24 bits score value, LSB first.
003355  2               addition:
003355  2  00 00 00     	.byte 0,0,0 		; score to add goes here
003358  2               
003358  2               
003358  2               ; http:;tetris.wikia.com/wiki/Scoring
003358  2               ; lines:       1   2   3   4
003358  2               lineScore1:
003358  2  40 00 00 00  	.byte $40, 00, 00, 00 	; left most byte of scores
00335C  2               lineScore2:
00335C  2  00 01 03 12  	.byte  00, 01, 03,$12	; middle byte
003360  2               lineScore3:
003360  2  00 00 00 00  	.byte  00, 00, 00, 00   ; right most byte of score
003364  2               
003364  2               
003364  1               	.include "play.inc"
003364  2               
003364  2               ; generate random number code
003364  2               
003364  2               SetupRandom:
003364  2               	; set the 16 bit rnd seed
003364  2               
003364  2  A2 89        	ldx #$89
003366  2  8E 99 33     	stx rndseed
003369  2  CA           	dex
00336A  2  8E 9A 33     	stx rndseed+1
00336D  2  60           	rts
00336E  2               
00336E  2               GetRandom:
00336E  2               	; get random number 0-6
00336E  2               	; it's in accumulator when returning
00336E  2               
00336E  2  AD 99 33     	lda rndseed 		; load seed high byte
003371  2  29 07        	and #%00000111 		; keep values 0-7
003373  2  C9 07        	cmp #$07 		; we can only use 0-6
003375  2  D0 06        	bne @skip1 		; valid number!
003377  2  20 7E 33     	jsr UpdateRandom 	; retry
00337A  2  4C 6E 33     	jmp GetRandom
00337D  2               @skip1:
00337D  2  60           	rts
00337E  2               
00337E  2               UpdateRandom:
00337E  2  AD 99 33     	lda rndseed 		; get first byte of rnd seed
003381  2  29 02        	and #%00000010 		; extract bit 1
003383  2  8D 9B 33     	sta rndtemp		; save it
003386  2  AD 9A 33     	lda rndseed+1 		; get 2nd byte of rnd seed
003389  2  29 02        	and #%00000010 		; extract bit 1
00338B  2  4D 9B 33     	eor rndtemp 		; one or the other but not both.
00338E  2  18           	clc 			; clear carry bit in case result was 0
00338F  2  F0 01        	beq @skip2
003391  2  38           	sec 			; set carry bit if result was 1
003392  2               @skip2:
003392  2               	; shift the 16 bit seed value to the right
003392  2               	; feeds the carry bit value into the msb
003392  2               
003392  2  6E 99 33     	ror rndseed 		; rotate 1st byte
003395  2  6E 9A 33     	ror rndseed+1 		; rotate 2nd byte
003398  2  60           	rts
003399  2               
003399  2               rndseed:
003399  2  00 00        	.byte 0,0
00339B  2               rndtemp:
00339B  2  00           	.byte 0
00339C  2               
00339C  1               	.include "gameover.inc"
00339C  2               
00339C  2               ; play mode
00339C  2               
00339C  2               linesPerLevel 		= 10		; level advance threshold
00339C  2               delayChange 		= 4 		; game goes this much faster each level
00339C  2               DEFAULT_DROP_DELAY 	= 70
00339C  2               
00339C  2               ; --------------------------------------------
00339C  2               
00339C  2               ; starts a new game
00339C  2               ; level and drop delay have already been set!
00339C  2               
00339C  2               StartPlayMode:
00339C  2               
00339C  2               	; reset drop delay
00339C  2               
00339C  2  A9 46        	lda #DEFAULT_DROP_DELAY
00339E  2  8D BD 2C     	sta fallDelay
0033A1  2  8D BE 2C     	sta fallDelayTimer
0033A4  2               
0033A4  2               	; add the levels
0033A4  2               	; currentLevel has been set by levelselect.asm
0033A4  2               
0033A4  2  AE 6A 35     	ldx currentLevel
0033A7  2  F0 06        	beq @skip1
0033A9  2               @loop1:
0033A9  2  20 8E 34     	jsr AddLevel
0033AC  2  CA           	dex
0033AD  2  D0 FA        	bne @loop1
0033AF  2               @skip1:
0033AF  2  20 28 35     	jsr PrintPlayScreen
0033B2  2  20 21 33     	jsr PrintLevel
0033B5  2               
0033B5  2               	; set up player stats
0033B5  2               
0033B5  2  20 A1 32     	jsr ResetScore 			; reset player score...
0033B8  2  20 D4 30     	jsr ResetLinesMade		; and total lines made
0033BB  2               
0033BB  2               	; reset play stats
0033BB  2               
0033BB  2  A9 00        	lda #$00 			; reset the lines counter...
0033BD  2  8D 6D 35     	sta levelLinesCounter 		; which is used to go up levels.
0033C0  2  8D 6D 32     	sta linesMade 			; and no lines made
0033C3  2               
0033C3  2               	; set the next block value
0033C3  2               	; NewBlock will use this value for a new block
0033C3  2               	; and set the next block value again for the next call
0033C3  2               
0033C3  2  20 6E 33     	jsr GetRandom
0033C6  2  8D B9 2C     	sta nextBlockID 		; this will be printed as the next block
0033C9  2               					; to fall
0033C9  2  20 DF 2B     	jsr NewBlock 			; get a new player block
0033CC  2  60           	rts
0033CD  2               
0033CD  2               ; ----------------------------------------------
0033CD  2               
0033CD  2               UpdatePlayMode:
0033CD  2  20 7E 33     	jsr UpdateRandom
0033D0  2               
0033D0  2  A2 05        	ldx #5
0033D2  2  20 3F 38     	jsr readinput
0033D5  2  C9 29        	cmp #PAUSE 			; pressed P?
0033D7  2  D0 03        	bne @skip2
0033D9  2  4C FB 34     	jmp TogglePause 		; toggle and abort rest of update
0033DC  2               @skip2:
0033DC  2  A2 06        	ldx #6
0033DE  2  20 3F 38     	jsr readinput
0033E1  2  C9 04        	cmp #RESET 			; pressed Q?
0033E3  2  D0 11        	bne rskip3
0033E5  2               
0033E5  2  A9 01        	lda #MODE_ATTRACT
0033E7  2  8D 64 2A     	sta gameMode
0033EA  2               wait_reset_release:
0033EA  2  A2 06        	ldx #6
0033EC  2  20 3F 38     	jsr readinput
0033EF  2  C9 04        	cmp #RESET 			; pressed Q?
0033F1  2  F0 F7        	beq wait_reset_release
0033F3  2  4C 33 36     	jmp StartAttractMode
0033F6  2               	; jmp ResetGame
0033F6  2               rskip3:
0033F6  2  AD 65 2A     	lda pauseFlag 			; are we in pause mode?
0033F9  2  F0 01        	beq @skip4 			; no, so continue
0033FB  2  60           	rts 				; yes, abort rest of update
0033FC  2               
0033FC  2               @skip4:
0033FC  2               	; check if we are flashing made lines
0033FC  2               
0033FC  2  AD 6D 32     	lda linesMade 			; did we make lines in previous update?
0033FF  2  F0 03        	beq doInput			; no, continue
003401  2  4C BE 34     	jmp UpdateLineFlash 		; yes, do that, and abort rest of update
003404  2               
003404  2               doInput:
003404  2  20 3B 2E     	jsr GetInput
003407  2  AE 3A 2E     	ldx inputResult
00340A  2  E0 FF        	cpx #NOINPUT 			; if there was no input ...
00340C  2  F0 48        	beq doLogic 			; perform game logic and @skip control process
00340E  2               doControls:
00340E  2  E0 2F        	cpx #LEFT
003410  2  D0 0B        	bne @skipControl1
003412  2  20 33 2C     	jsr BlockLeft
003415  2               
003415  2  A9 00        	lda #SND_MOVE_BLOCK
003417  2  20 75 5F     	jsr playsound
00341A  2               
00341A  2  4C 56 34     	jmp doLogic
00341D  2               @skipControl1:
00341D  2  E0 2C          	cpx #RIGHT
00341F  2  D0 0B          	bne @skipControl2
003421  2  20 45 2C       	jsr BlockRight
003424  2               
003424  2  A9 00        	lda #SND_MOVE_BLOCK
003426  2  20 75 5F     	jsr playsound
003429  2               
003429  2  4C 56 34       	jmp doLogic
00342C  2               @skipControl2:
00342C  2  E0 0D          	cpx #TURNCOUNTER
00342E  2  D0 0B          	bne @skipControl3
003430  2  20 8A 2C       	jsr BlockRotateCCW
003433  2               
003433  2  A9 01        	lda #SND_ROTATE_BLOCK
003435  2  20 75 5F     	jsr playsound
003438  2               
003438  2  4C 56 34       	jmp doLogic
00343B  2               @skipControl3:
00343B  2  E0 0A         	cpx #TURNCLOCK
00343D  2  D0 0B         	bne @skipControl4
00343F  2  20 A0 2C      	jsr BlockRotateCW
003442  2               
003442  2  A9 01        	lda #SND_ROTATE_BLOCK
003444  2  20 75 5F     	jsr playsound
003447  2               
003447  2  4C 56 34      	jmp doLogic
00344A  2               @skipControl4:
00344A  2  E0 01        	cpx #DOWN
00344C  2  D0 0D        	bne doLogic1
00344E  2  20 57 2C     	jsr BlockDown
003451  2               
003451  2  A9 02        	lda #SND_DROP_BLOCK
003453  2  20 75 5F     	jsr playsound
003456  2               
003456  2               doLogic:
003456  2               
003456  2  A9 00        	lda #0
003458  2  8D 62 38     	sta key_pressed_flag
00345B  2               doLogic1:
00345B  2  20 B7 2B     	jsr DropBlock 			; move play block down if delay has passed
00345E  2  C9 02        	cmp #$02 			; Acc=2 means that a new block is needed
003460  2  F0 01        	beq @skip5
003462  2  60           	rts 				; block still in play, no line check needed
003463  2               @skip5:
003463  2  20 23 31     	jsr CheckLines 			; block has dropped, so check
003466  2  AD 6D 32     	lda linesMade 			; are lines made?
003469  2  F0 01        	beq @skip6 			; no, place new block
00346B  2  60           	rts 				; yes. do not create a new block now
00346C  2               					; UpdateLineFlash will do that later on
00346C  2               @skip6:
00346C  2  20 DF 2B     	jsr NewBlock 			; Acc=0 means the new block fits
00346F  2  F0 03        	beq @skip7 			; fits. so exit
003471  2  4C 75 34     	jmp EndPlayMode 		; no fit!
003474  2               @skip7:
003474  2  60           	rts
003475  2               
003475  2               EndPlayMode:
003475  2  20 17 39     	jsr CheckHighScore
003478  2  C0 03        	cpy #3
00347A  2  F0 09        	beq no_highscore
00347C  2  A9 05        	lda #MODE_ENTERNAME
00347E  2  8D 64 2A     	sta gameMode
003481  2  20 71 35     	jsr StartGameOverMode
003484  2  60           	rts
003485  2               no_highscore:
003485  2  A9 04        	lda #MODE_GAMEOVER
003487  2  8D 64 2A     	sta gameMode
00348A  2  20 71 35     	jsr StartGameOverMode
00348D  2  60           	rts
00348E  2               
00348E  2               ; -------------------------------------------------
00348E  2               
00348E  2               ; up the player level
00348E  2               
00348E  2               AddLevel:
00348E  2  EE 6A 35     	inc currentLevel		; go up a level
003491  2               
003491  2               	; update the level values
003491  2               	; so we can print it later
003491  2               
003491  2  F8           	sed 				; set decimal mode
003492  2  18           	clc 				; clear the carry bit
003493  2  AD 6B 35     	lda gameLevel+0  		; get current total lines value
003496  2  69 01        	adc #$01   			; go up a level
003498  2  8D 6B 35     	sta gameLevel+0 		; store it.
00349B  2               
00349B  2  AD 6C 35     	lda gameLevel+1 		; and the 2nd byte.
00349E  2  69 00        	adc #$00 			; always 0, we can add 4 lines max.
0034A0  2  8D 6C 35     	sta gameLevel+1
0034A3  2  D8           	cld 				; clear decimal mode
0034A4  2               
0034A4  2               	; reset the 'lines made this level' counter
0034A4  2               
0034A4  2  AD 6D 35     	lda levelLinesCounter
0034A7  2  38           	sec
0034A8  2  E9 0A        	sbc #linesPerLevel		; restart count ...
0034AA  2  8D 6D 35     	sta levelLinesCounter 		; ... so we can restart this check.
0034AD  2               
0034AD  2               	; decrease the game delay
0034AD  2               
0034AD  2  AD BD 2C     	lda fallDelay 			; get the current delay
0034B0  2  38           	sec
0034B1  2  E9 04        	sbc #delayChange		; make delay shorter
0034B3  2  B0 02        	bcs @skip8 			; is delay lower than 0?
0034B5  2  A9 04        	lda #delayChange 		; yes: set shortest delay.
0034B7  2               @skip8:
0034B7  2  8D BD 2C     	sta fallDelay 			; store the new delay value
0034BA  2  8D BE 2C     	sta fallDelayTimer 		; reset the current delay counter
0034BD  2  60           	rts
0034BE  2               
0034BE  2               
0034BE  2               ; --------------------------------------------------
0034BE  2               
0034BE  2               UpdateLineFlash:
0034BE  2  20 89 31     	jsr FlashLines
0034C1  2  AD 74 32     	lda totalFlashDelay 		; flashed long enough?
0034C4  2  F0 01        	beq exitflash			; yes. remove the lines and update score
0034C6  2  60           	rts 				; not yet. do this again on next update
0034C7  2               
0034C7  2               exitflash:
0034C7  2               	; flashing is all done
0034C7  2               
0034C7  2  20 DD 30     	jsr AddLinesTotal 		; add the made lines to total
0034CA  2  20 F2 30     	jsr PrintTotalLinesMade 	; and print these
0034CD  2               
0034CD  2  20 01 33     	jsr AddLineScore		; add score made by lines
0034D0  2  20 CC 32     	jsr PrintScore 			; show the score
0034D3  2               
0034D3  2  20 F8 31     	jsr RemoveLines 		; then remove lines from screen
0034D6  2               
0034D6  2  AD 6D 35     	lda levelLinesCounter 		; get lines made so far in this level
0034D9  2  18           	clc
0034DA  2  6D 6D 32     	adc linesMade 			; add the made lines
0034DD  2  8D 6D 35     	sta levelLinesCounter
0034E0  2               
0034E0  2  A9 00        	lda #$00			; reset the lines made
0034E2  2  8D 6D 32     	sta linesMade
0034E5  2               
0034E5  2               	; go up a level?
0034E5  2               
0034E5  2  AD 6D 35     	lda levelLinesCounter		; get lines made so far at this level
0034E8  2  C9 0A        	cmp #linesPerLevel 		; did we make enough to go up a level?
0034EA  2  90 06        	bcc @skip9 			; no: If the C flag is 0, then A (unsigned) < NUM (unsigned)
0034EC  2               					; and BCC will branch
0034EC  2  20 8E 34     	jsr AddLevel 			; go up 1 level
0034EF  2  20 21 33     	jsr PrintLevel 			; print it
0034F2  2               @skip9:
0034F2  2               	; add a new block to play with
0034F2  2               
0034F2  2  20 DF 2B     	jsr NewBlock 			; create a new block
0034F5  2  F0 03        	beq @skip10 			; fits. so exit
0034F7  2  4C 75 34     	jmp EndPlayMode 		; no fit!
0034FA  2               @skip10:
0034FA  2  60           	rts
0034FB  2               
0034FB  2               ; --------------------------------------------------
0034FB  2               
0034FB  2               TogglePause:
0034FB  2  A2 05        	ldx #5
0034FD  2  20 3F 38     	jsr readinput
003500  2  C9 29        	cmp #PAUSE 			; pressed p?
003502  2  F0 F7        	beq TogglePause
003504  2               
003504  2  AD 65 2A     	lda pauseFlag 			; get the current pause flag
003507  2  49 01        	eor #%00000001 			; flip between 0 and 1
003509  2  8D 65 2A     	sta pauseFlag 			; store it
00350C  2               
00350C  2  C9 01        	cmp #$01 			; pause mode?
00350E  2  F0 08        	beq @skip11 			; yes
003510  2               
003510  2  A9 06        	lda #SND_PAUSE_OFF
003512  2  20 75 5F     	jsr playsound
003515  2               
003515  2  4C 48 2F     	jmp RestorePlayArea 		; no, restore the screen
003518  2               @skip11:
003518  2               	; game is paused. so clear the screen
003518  2               
003518  2  A9 01        	lda #$01 			; set the erase flag
00351A  2  8D 0B 30     	sta playAreaErase 		; so area gets cleared as well
00351D  2  20 FD 2E     	jsr SavePlayArea 		; save and clear the play area
003520  2               
003520  2  A9 05        	lda #SND_PAUSE_ON
003522  2  20 75 5F     	jsr playsound
003525  2               
003525  2  4C 49 35     	jmp PrintPaused
003528  2               
003528  2               ; --------------------------------------------------
003528  2               
003528  2               
003528  2               PrintPlayScreen:
003528  2               
003528  2               	; set start of data
003528  2               
003528  2  A9 9E        	lda #<playscreen
00352A  2  8D 00 30     	sta dataSourceLo
00352D  2  A9 42        	lda #>playscreen
00352F  2  8D FF 2F     	sta dataSourceHi
003532  2               
003532  2               	; set data dimensions
003532  2               
003532  2  A9 15        	lda #21
003534  2  8D 01 30     	sta dataWidth
003537  2  A9 15        	lda #21
003539  2  8D 02 30     	sta dataHeight
00353C  2               
00353C  2               	; set start of area to print to
00353C  2               
00353C  2  A9 4D        	lda #>(L0400+10)
00353E  2  8D 03 30     	sta dataDestinationHi
003541  2  A9 0A        	lda #<(L0400+10)
003543  2  8D 04 30     	sta dataDestinationLo
003546  2               
003546  2  4C 8A 2F     	jmp WriteScreenData
003549  2               
003549  2               ; -----------------------------------------------------
003549  2               
003549  2               PrintPaused:
003549  2  A9 1F        	lda #<pauseText
00354B  2  8D 00 30     	sta dataSourceLo
00354E  2  A9 45        	lda #>pauseText
003550  2  8D FF 2F     	sta dataSourceHi
003553  2  A9 0A        	lda #10
003555  2  8D 01 30     	sta dataWidth
003558  2  A9 14        	lda #20
00355A  2  8D 02 30     	sta dataHeight
00355D  2  A9 4D        	lda #>(L0400+12)
00355F  2  8D 03 30     	sta dataDestinationHi
003562  2  A9 0C        	lda #<(L0400+12)
003564  2  8D 04 30     	sta dataDestinationLo
003567  2  4C 8A 2F     	jmp WriteScreenData
00356A  2               
00356A  2               ; -----------------------------------------------------
00356A  2               
00356A  2               currentLevel:
00356A  2  00           	.byte 0 			; current player level
00356B  2               
00356B  2               gameLevel:
00356B  2  00 00        	.byte 0,0 			; values for printing the current level. LSB first.
00356D  2               
00356D  2               levelLinesCounter:
00356D  2  00           	.byte 0 			; this byte holds lines made after last
00356E  2               					; level increase. threshold is declared on top of file.
00356E  2               
00356E  1               	.include "attract.inc"
00356E  2               
00356E  2               ; code concerning the game over mode
00356E  2               
00356E  2               STEP_FILLWELL = 0
00356E  2               STEP_CLEARWELL = 1
00356E  2               STEP_TEXT = 2
00356E  2               
00356E  2               	; the character to fill the well with
00356E  2               drawCharacter:
00356E  2  00           	.byte 0
00356F  2               
00356F  2               	; the mode step variable
00356F  2               currentStep:
00356F  2  00           	.byte 0
003570  2               
003570  2               	; the amount of lines left to fill
003570  2               linesLeft:
003570  2  00           	.byte 0
003571  2               
003571  2               
003571  2               ; ------------------------------------------------
003571  2               
003571  2               StartGameOverMode:
003571  2               
003571  2               	; prepare for the first step
003571  2               
003571  2  A9 00        	lda #STEP_FILLWELL
003573  2  8D 6F 35     	sta currentStep
003576  2               
003576  2               	; we will render this block
003576  2  A9 58        	lda #88
003578  2  8D 6E 35     	sta drawCharacter
00357B  2               
00357B  2               	; and we need to do 20 lines
00357B  2  A9 14        	lda #20
00357D  2  8D 70 35     	sta linesLeft
003580  2               
003580  2               	; point to the bottom line
003580  2  A2 0C        	ldx #12
003582  2  8E 09 30     	stx blk_x
003585  2  A0 13        	ldy #19
003587  2  8C 0A 30     	sty blk_y
00358A  2  20 66 2A     	jsr SetScreenPointer
00358D  2               
00358D  2  A9 08        	lda #SND_MUSIC_GAMEOVER
00358F  2  20 75 5F     	jsr playsound
003592  2               
003592  2  60           	rts
003593  2               
003593  2               ; ---------------------------------------------------
003593  2               
003593  2               UpdateGameOverMode:
003593  2               
003593  2  AD 6F 35     	lda currentStep 	; which step to ...
003596  2  C9 00        	cmp #STEP_FILLWELL 	; perform?
003598  2  D0 28        	bne otherStep1
00359A  2               
00359A  2  20 F2 35     	jsr FillLine
00359D  2  CE 0A 30     	dec blk_y
0035A0  2  A9 0C        	lda #12
0035A2  2  8D 09 30     	sta blk_x
0035A5  2  CE 70 35     	dec linesLeft		; all lines done?
0035A8  2  F0 01        	beq @skip1 		; yes. prepare next step
0035AA  2  60           	rts 			; no. continue on next update
0035AB  2               @skip1:
0035AB  2               	; done filling
0035AB  2               	; go to next step
0035AB  2               
0035AB  2  A9 01        	lda #STEP_CLEARWELL
0035AD  2  8D 6F 35     	sta currentStep
0035B0  2  A9 20        	lda #$20
0035B2  2  8D 6E 35     	sta drawCharacter
0035B5  2  A9 13        	lda #19
0035B7  2  8D 70 35     	sta linesLeft
0035BA  2               
0035BA  2               	; point to the bottom line
0035BA  2  A2 0E        	ldx #12+2
0035BC  2  A0 10        	ldy #19-3
0035BE  2  20 66 2A     	jsr SetScreenPointer
0035C1  2  60           	rts
0035C2  2               
0035C2  2               otherStep1:
0035C2  2  C9 01        	cmp #STEP_CLEARWELL
0035C4  2  D0 11        	bne otherStep2
0035C6  2               
0035C6  2  20 F2 35     	jsr FillLine
0035C9  2  CE 70 35     	dec linesLeft		; all lines done?
0035CC  2  F0 01        	beq @skip2 		; yes. prepare next step
0035CE  2  60           	rts 			; no. continue on next update
0035CF  2               @skip2:
0035CF  2               	; done clearing
0035CF  2               	; print text and go to next mode
0035CF  2               
0035CF  2  A9 02        	lda #STEP_TEXT 		; go to next step
0035D1  2  8D 6F 35     	sta currentStep
0035D4  2  20 0D 36     	jsr PrintGameOver
0035D7  2               otherStep2:
0035D7  2               
0035D7  2               	; waiting for a key or fire button
0035D7  2               
0035D7  2  A2 04        	ldx #4
0035D9  2  20 3F 38     	jsr readinput
0035DC  2  C9 01        	cmp #DOWN 		; enter pressed?
0035DE  2  D0 11        	bne no_key_press
0035E0  2  A9 01        	lda #MODE_ATTRACT
0035E2  2  8D 64 2A     	sta gameMode
0035E5  2               wait_release:
0035E5  2  A2 04        	ldx #4
0035E7  2  20 3F 38     	jsr readinput
0035EA  2  C9 01        	cmp #DOWN 		; wait until released
0035EC  2  F0 F7        	beq wait_release
0035EE  2  4C 33 36     	jmp StartAttractMode
0035F1  2               
0035F1  2               no_key_press:
0035F1  2  60           	rts
0035F2  2               
0035F2  2               
0035F2  2               ; ---------------------------------------------------
0035F2  2               
0035F2  2               EndGameOverMode:
0035F2  2               
0035F2  2               
0035F2  2               
0035F2  2               ; ---------------------------------------------------
0035F2  2               
0035F2  2               
0035F2  2               ; files a line with the drawcharacter
0035F2  2               
0035F2  2               FillLine:
0035F2  2  AD 6E 35     	lda drawCharacter	 	; get char
0035F5  2  A0 00        	ldy #$00
0035F7  2               @loop1:
0035F7  2  91 80        	sta (screenPointer),y 	; store on screen
0035F9  2  20 23 2E     	jsr displayblock
0035FC  2  EE 09 30     	inc blk_x
0035FF  2  C8           	iny
003600  2  C0 0A        	cpy #10 		; line done?
003602  2  D0 F3        	bne @loop1
003604  2  A9 0E        	lda #12+2
003606  2  8D 09 30     	sta blk_x
003609  2  20 8A 2A     	jsr UpOneRow 	; prepare for next line
00360C  2  60           	rts
00360D  2               
00360D  2               ; -----------------------------------------------
00360D  2               
00360D  2               PrintGameOver:
00360D  2               
00360D  2               	; set start of data
00360D  2               
00360D  2  A9 57        	lda #<gameoverText
00360F  2  8D 00 30     	sta dataSourceLo
003612  2  A9 44        	lda #>gameoverText
003614  2  8D FF 2F     	sta dataSourceHi
003617  2  A9 0A        	lda #10
003619  2  8D 01 30     	sta dataWidth
00361C  2  A9 14        	lda #20
00361E  2  8D 02 30     	sta dataHeight
003621  2  A9 4D        	lda #>(L0400+12)
003623  2  8D 03 30     	sta dataDestinationHi
003626  2  A9 0C        	lda #<(L0400+12)
003628  2  8D 04 30     	sta dataDestinationLo
00362B  2  20 8A 2F     	jsr WriteScreenData
00362E  2               
00362E  2  4C 17 39     	jmp CheckHighScore
003631  2               
003631  1               	.include "levelselect.inc"
003631  2               
003631  2               
003631  2               ; attrack mode steps
003631  2               
003631  2               STEP_TITLE 	= 0
003631  2               STEP_CREDITS 	= 1
003631  2               STEP_CONTROLS 	= 2
003631  2               STEP_HIGHSCORE	= 3
003631  2               ATTRACT_DELAY 	= 50 * 5
003631  2               
003631  2               attractStep:
003631  2  00           	.byte 0
003632  2               
003632  2               attractDelay:
003632  2  00           	.byte 0
003633  2               
003633  2               ; -----------------------------------------
003633  2               
003633  2               StartAttractMode:
003633  2  A9 FA        	lda #ATTRACT_DELAY
003635  2  8D 32 36     	sta attractDelay
003638  2  A9 00        	lda #STEP_TITLE
00363A  2  8D 31 36     	sta attractStep
00363D  2               
00363D  2               	; set the screen size
00363D  2               	; this is the same for all steps
00363D  2               	; so doing it once is enough
00363D  2               
00363D  2               	; set data dimensions
00363D  2  A9 15        	lda #21
00363F  2  8D 01 30     	sta dataWidth
003642  2  A9 14        	lda #20
003644  2  8D 02 30     	sta dataHeight
003647  2               
003647  2               	; set start of area to print to
003647  2               
003647  2  A9 4D        	lda #>(L0400+10)
003649  2  8D 03 30     	sta dataDestinationHi
00364C  2  A9 0A        	lda #<(L0400+10)
00364E  2  8D 04 30     	sta dataDestinationLo
003651  2               
003651  2               	; print the first screen
003651  2               
003651  2  A9 E7        	lda #<titleScreenData
003653  2  8D 00 30     	sta dataSourceLo
003656  2  A9 45        	lda #>titleScreenData
003658  2  8D FF 2F     	sta dataSourceHi
00365B  2  20 8A 2F     	jsr WriteScreenData
00365E  2               
00365E  2  A9 09        	lda #SND_MUSIC_TITLE
003660  2  4C 75 5F     	jmp playsound
003663  2               
003663  2               
003663  2               ; -----------------------------------------
003663  2               
003663  2               UpdateAttractMode:
003663  2  20 6B FE     	jsr $fe6b
003666  2  20 6B FE     	jsr $fe6b
003669  2  CE 32 36     	dec attractDelay
00366C  2  F0 10        	beq triggered 		; swap screen when triggered
00366E  2               
00366E  2               	; check for key or joy button press
00366E  2               
00366E  2  A2 04        	ldx #4
003670  2  20 3F 38     	jsr readinput
003673  2  C9 01        	cmp #DOWN 		; enter pressed?
003675  2  F0 01        	beq @skip1 		; yes
003677  2  60           	rts
003678  2               @skip1:
003678  2  20 35 38     	jsr wait_press
00367B  2  4C F1 36     	jmp EndAttractMode	; start the game
00367E  2               triggered:
00367E  2  A9 FA        	lda #ATTRACT_DELAY 	; reset the delay
003680  2  8D 32 36     	sta attractDelay
003683  2               
003683  2  EE 31 36     	inc attractStep 	; go to next screen
003686  2  AD 31 36     	lda attractStep
003689  2  C9 04        	cmp #4 			; have we done 4 screens?
00368B  2  D0 05        	bne @skip2		; no. continue cycle
00368D  2  A9 00        	lda #STEP_TITLE    	; yes. reset cycle
00368F  2  8D 31 36     	sta attractStep
003692  2               @skip2:
003692  2               	; set data dimensions
003692  2               
003692  2  A9 15        	lda #21
003694  2  8D 01 30     	sta dataWidth
003697  2  A9 14        	lda #20
003699  2  8D 02 30     	sta dataHeight
00369C  2               
00369C  2               	; reset the screen pointer
00369C  2               
00369C  2  A9 4D        	lda #>(L0400+10)
00369E  2  8D 03 30     	sta dataDestinationHi
0036A1  2  A9 0A        	lda #<(L0400+10)
0036A3  2  8D 04 30     	sta dataDestinationLo
0036A6  2               
0036A6  2               	; set start of data
0036A6  2               	; dependent on attract step
0036A6  2               
0036A6  2  AD 31 36     	lda attractStep
0036A9  2  C9 00        	cmp #STEP_TITLE
0036AB  2  D0 0D        	bne nextstep1
0036AD  2  A9 E7        	lda #<titleScreenData
0036AF  2  8D 00 30     	sta dataSourceLo
0036B2  2  A9 45        	lda #>titleScreenData
0036B4  2  8D FF 2F     	sta dataSourceHi
0036B7  2  4C 8A 2F     	jmp WriteScreenData
0036BA  2               nextstep1:
0036BA  2  C9 01        	cmp #STEP_CREDITS
0036BC  2  D0 0D        	bne nextstep2
0036BE  2  A9 44        	lda #<creditsScreenData
0036C0  2  8D 00 30     	sta dataSourceLo
0036C3  2  A9 49        	lda #>creditsScreenData
0036C5  2  8D FF 2F     	sta dataSourceHi
0036C8  2  4C 8A 2F     	jmp WriteScreenData
0036CB  2               
0036CB  2               nextstep2:
0036CB  2  C9 02        	cmp #STEP_CONTROLS
0036CD  2  D0 0D        	bne nextstep3
0036CF  2  A9 8B        	lda #<keysScreenData
0036D1  2  8D 00 30     	sta dataSourceLo
0036D4  2  A9 47        	lda #>keysScreenData
0036D6  2  8D FF 2F     	sta dataSourceHi
0036D9  2  4C 8A 2F     	jmp WriteScreenData
0036DC  2               nextstep3:
0036DC  2  C9 03        	cmp #STEP_HIGHSCORE
0036DE  2  D0 10        	bne nextstep4
0036E0  2  A9 FD        	lda #<selectScreenData
0036E2  2  8D 00 30     	sta dataSourceLo
0036E5  2  A9 4A        	lda #>selectScreenData
0036E7  2  8D FF 2F     	sta dataSourceHi
0036EA  2  20 8A 2F     	jsr WriteScreenData
0036ED  2  4C D7 39     	jmp PrintHighScores
0036F0  2               nextstep4:
0036F0  2  60           	rts
0036F1  2               ; -----------------------------------------
0036F1  2               
0036F1  2               EndAttractMode:
0036F1  2  A9 02        	lda #MODE_SELECTLEVEL
0036F3  2  8D 64 2A     	sta gameMode
0036F6  2  20 FA 36     	jsr StartLevelSelectMode
0036F9  2  60           	rts
0036FA  2               
0036FA  1               	.include "atomkernal.inc"
0036FA  2               
0036FA  2               FLASH_DELAY 	= 18
0036FA  2               
0036FA  2               ; ----------------------------------
0036FA  2               
0036FA  2               StartLevelSelectMode:
0036FA  2               
0036FA  2  A9 00        	lda #$00
0036FC  2  8D 6A 35     	sta currentLevel
0036FF  2  8D E8 37     	sta previousLevel
003702  2  8D E7 37     	sta levelDisplayFlag
003705  2  8D 6B 35     	sta gameLevel
003708  2  8D 6C 35     	sta gameLevel+1
00370B  2               
00370B  2  A9 01        	lda #1
00370D  2  8D E6 37     	sta levelFlashDelay 		; and delay counter
003710  2               
003710  2               	; print the screen
003710  2               
003710  2  A9 FD        	lda #<selectScreenData
003712  2  8D 00 30     	sta dataSourceLo
003715  2  A9 4A        	lda #>selectScreenData
003717  2  8D FF 2F     	sta dataSourceHi
00371A  2  A9 15        	lda #21
00371C  2  8D 01 30     	sta dataWidth
00371F  2  A9 15        	lda #21
003721  2  8D 02 30     	sta dataHeight
003724  2  A9 4D        	lda #>(L0400+10)
003726  2  8D 03 30     	sta dataDestinationHi
003729  2  A9 0A        	lda #<(L0400+10)
00372B  2  8D 04 30     	sta dataDestinationLo
00372E  2  20 8A 2F     	jsr WriteScreenData
003731  2  20 D7 39     	jsr PrintHighScores
003734  2               
003734  2  A9 00        	lda #SND_MOVE_BLOCK
003736  2  4C 75 5F     	jmp playsound
003739  2               
003739  2               ; --------------------------------------------------
003739  2               
003739  2               UpdateLevelSelectMode:
003739  2  20 3B 2E     	jsr GetInput 			; check for input
00373C  2  AE 3A 2E     	ldx inputResult
00373F  2  E0 FF        	cpx #NOINPUT
003741  2  F0 53        	beq doLevelFlash
003743  2               
003743  2               	; there is input
003743  2               
003743  2               ;	cpx #TURNCLOCK 			; hit fire?
003743  2               ;	bne @skip1
003743  2               ;	jmp EndLevelSelectMode
003743  2               ;@skip1:
003743  2  E0 01        	cpx #DOWN 			; hit return?
003745  2  D0 0B        	bne @skip2
003747  2               
003747  2  A9 07        	lda #SND_OPTION
003749  2  20 75 5F     	jsr playsound
00374C  2               
00374C  2  20 35 38     	jsr wait_press
00374F  2               
00374F  2  4C C9 37     	jmp EndLevelSelectMode
003752  2               @skip2:
003752  2  E0 2F        	cpx #LEFT
003754  2  D0 0E        	bne @skip3
003756  2  AD 6A 35     	lda currentLevel
003759  2  F0 3B        	beq doLevelFlash 		; we cant go lower, goto flashing
00375B  2  8D E8 37     	sta previousLevel 		; store level
00375E  2  CE 6A 35     	dec currentLevel 		; and change level
003761  2  4C 75 37     	jmp inputDone
003764  2               @skip3:
003764  2  E0 2C        	cpx #RIGHT
003766  2  D0 2E        	bne doLevelFlash  		; no further relevant input, goto flashing
003768  2  AD 6A 35     	lda currentLevel
00376B  2  C9 09        	cmp #9
00376D  2  F0 27        	beq doLevelFlash 		; we cannot go higher, goto flashing
00376F  2  8D E8 37     	sta previousLevel
003772  2  EE 6A 35     	inc currentLevel
003775  2               inputDone:
003775  2               	; level select has changed
003775  2               	; make sure previous level is showing
003775  2               
003775  2  AE E8 37     	ldx previousLevel
003778  2  BD DC 37     	lda levelY,x
00377B  2  48           	pha
00377C  2  BD D2 37     	lda levelX,x
00377F  2  A8           	tay
003780  2  68           	pla
003781  2  AA           	tax
003782  2  18           	clc
003783  2  20 E9 37     	jsr plot
003786  2               
003786  2  AD E8 37     	lda previousLevel
003789  2  69 30        	adc #$30  			; add #$30 to it to get a screencode
00378B  2  20 EE 37     	jsr chrout
00378E  2               
00378E  2               	; make sure to show change asap
00378E  2               
00378E  2  A9 01        	lda #$01
003790  2  8D E7 37     	sta levelDisplayFlag
003793  2  8D E6 37     	sta levelFlashDelay
003796  2               
003796  2               doLevelFlash:
003796  2  CE E6 37     	dec levelFlashDelay
003799  2  F0 01        	beq @skip4 			; do flashing
00379B  2  60           	rts 				; nothing to do anymore
00379C  2               @skip4:
00379C  2               	; we are going to flash the level indicator
00379C  2               
00379C  2  A9 12        	lda #FLASH_DELAY
00379E  2  8D E6 37     	sta levelFlashDelay 		; reset the delay counter
0037A1  2               
0037A1  2               	; set cursor to correct location
0037A1  2               
0037A1  2  AE 6A 35     	ldx currentLevel
0037A4  2  BD DC 37     	lda levelY,x
0037A7  2  48           	pha
0037A8  2  BD D2 37     	lda levelX,x
0037AB  2  A8           	tay
0037AC  2  68           	pla
0037AD  2  AA           	tax
0037AE  2  18           	clc
0037AF  2  20 E9 37     	jsr plot
0037B2  2               
0037B2  2               	; flip the display flag
0037B2  2               
0037B2  2  AD E7 37     	lda levelDisplayFlag
0037B5  2  49 01        	eor #%00000001
0037B7  2  8D E7 37     	sta levelDisplayFlag
0037BA  2               
0037BA  2  F0 08        	beq space 			; flag clear? then print space
0037BC  2  AD 6A 35     	lda currentLevel 		; get the level value
0037BF  2  69 30        	adc #$30 			; add #$30 to it to get a screencode
0037C1  2  4C EE 37     	jmp chrout 			; print and exit
0037C4  2               space:
0037C4  2  A9 20        	lda #$20
0037C6  2  4C EE 37     	jmp chrout 			; and exit
0037C9  2               
0037C9  2               ; ----------------------------------
0037C9  2               
0037C9  2               EndLevelSelectMode:
0037C9  2  A9 03        	lda #MODE_PLAY
0037CB  2  8D 64 2A     	sta gameMode
0037CE  2  20 9C 33     	jsr StartPlayMode
0037D1  2  60           	rts
0037D2  2               
0037D2  2               ; ----------------------------------
0037D2  2               
0037D2  2               ; x/y positions of level numbers on screen
0037D2  2               
0037D2  2               ;              0  1  2  3  4  5  6  7  8  9
0037D2  2               levelX:
0037D2  2  0B 0D 0F 11  	.byte 16-5,18-5,20-5,22-5,24-5,16-5,18-5,20-5,22-5,24-5
0037D6  2  13 0B 0D 0F  
0037DA  2  11 13        
0037DC  2               levelY:
0037DC  2  09 09 09 09  	.byte 07+2,07+2,07+2,07+2,07+2,09+2,09+2,09+2,09+2,09+2
0037E0  2  09 0B 0B 0B  
0037E4  2  0B 0B        
0037E6  2               
0037E6  2               levelFlashDelay:
0037E6  2  00           	.byte 0 			; counter
0037E7  2               levelDisplayFlag:
0037E7  2  00           	.byte 0				; render number or space
0037E8  2               previousLevel:
0037E8  2  00           	.byte 0
0037E9  2               
0037E9  1               	.include "joykey.inc"
0037E9  2               ; routine to set cursor position
0037E9  2               
0037E9  2               XPOS	= $84
0037E9  2               YPOS	= $85
0037E9  2               
0037E9  2               plot:
0037E9  2  84 84        	sty XPOS
0037EB  2  86 85        	stx YPOS
0037ED  2  60           	rts
0037EE  2               
0037EE  2               ; ------------------------------------------------
0037EE  2               ; routine to print character
0037EE  2               
0037EE  2               SCR	= $86
0037EE  2               
0037EE  2               chrout:
0037EE  2  48           	pha
0037EF  2               
0037EF  2  0A           	asl a			; Calculate char address
0037F0  2  2E 1E 38     	rol chr_loop+2
0037F3  2  0A           	asl a
0037F4  2  2E 1E 38     	rol chr_loop+2
0037F7  2  0A           	asl a
0037F8  2  2E 1E 38     	rol chr_loop+2
0037FB  2               
0037FB  2  18           	clc
0037FC  2  69 5E        	adc #<char_base
0037FE  2  8D 1D 38     	sta chr_loop+1
003801  2               
003801  2  AD 1E 38     	lda chr_loop+2
003804  2  29 07        	and #$07
003806  2  69 3B        	adc #>char_base
003808  2  8D 1E 38     	sta chr_loop+2
00380B  2               
00380B  2  8A           	txa
00380C  2  48           	pha
00380D  2  98           	tya
00380E  2  48           	pha
00380F  2               
00380F  2  A5 84        	lda XPOS		; Calculate screenaddress
003811  2  85 86        	sta SCR
003813  2  A5 85        	lda YPOS
003815  2  18           	clc
003816  2  69 80        	adc #$80
003818  2  85 87        	sta SCR+1
00381A  2               	
00381A  2  A2 07        	ldx #7
00381C  2               chr_loop:
00381C  2  BD 00 40     	lda $4000,x
00381F  2  BC 2D 38     	ldy scrtab,x
003822  2  91 86        	sta (SCR),y
003824  2  CA           	dex
003825  2  10 F5        	bpl chr_loop
003827  2               
003827  2  68           	pla
003828  2  A8           	tay
003829  2  68           	pla
00382A  2  AA           	tax
00382B  2  68           	pla
00382C  2  60           	rts
00382D  2               
00382D  2               scrtab:
00382D  2  00 20 40 60  	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003831  2  80 A0 C0 E0  
003835  2               
003835  2               wait_press:
003835  2  A2 04        	ldx #4
003837  2  20 3F 38     	jsr readinput
00383A  2  C9 01        	cmp #DOWN 			; enter pressed?
00383C  2  F0 F7        	beq wait_press	 		; yes
00383E  2               	rts
00383F  2  60           
00383F  1               	.include "joystick.inc"
00383F  2               ;---------------------------------------------
00383F  2               ; Read key in matrix
00383F  2               ;
00383F  2               ; Select row and read column:
00383F  2               ;
00383F  2               ; X = key to be checked
00383F  2               ;
00383F  2               ; columnbit = 0 - key pressed,
00383F  2               ;             1 - key not pressed
00383F  2               ;---------------------------------------------
00383F  2               
00383F  2               inputsource	= $23f
00383F  2               
00383F  2               readinput:
00383F  2  2C 3F 02     	bit inputsource		; Check controls
003842  2  70 1F        	bvs inp_joykey		; Control = Joykey
003844  2  30 2B        	bmi inp_joymmc		; Control = JoyMMC
003846  2               
003846  2               inp_key:
003846  2  BD C5 38     	lda key_row,x
003849  2  09 F0        	ora #$f0
00384B  2  8D 00 B0     	sta $b000		; Select row
00384E  2               
00384E  2  AD 01 B0     	lda $b001		; Read column
003851  2  3D D1 38     	and key_column,x
003854  2  D0 09        	bne not_pressed
003856  2               
003856  2  A9 80        	lda #$80
003858  2  8D 62 38     	sta key_pressed_flag
00385B  2               
00385B  2  BD DD 38     	lda key_return,x
00385E  2  60           	rts
00385F  2               
00385F  2               not_pressed:
00385F  2  A9 FF        	lda #$ff
003861  2               ;	bit key_pressed_flag
003861  2               ;	bpl end_key
003861  2               ;	lda key_return,x
003861  2               end_key:
003861  2  60           	rts
003862  2               
003862  2  00           key_pressed_flag:	.byte 0
003863  2               
003863  2               ;--------------------------------------------------------
003863  2               ; Control = Joykey
003863  2               ;--------------------------------------------------------
003863  2               
003863  2               inp_joykey:
003863  2  E0 05        	cpx #5			; P,Q key
003865  2  B0 DF        	bcs inp_key
003867  2               
003867  2  E8           	inx
003868  2  E8           	inx
003869  2  E8           	inx
00386A  2  E8           	inx
00386B  2  E8           	inx
00386C  2  E8           	inx
00386D  2  E8           	inx
00386E  2  4C 46 38     	jmp inp_key
003871  2               
003871  2               ;--------------------------------------------------------
003871  2               ; Control = JoyMMC
003871  2               ;--------------------------------------------------------
003871  2               
003871  2               inp_joymmc:
003871  2  E0 05        	cpx #5			; P,Q key
003873  2  B0 D1        	bcs inp_key
003875  2               
003875  2  20 FC 38     	jsr joyget
003878  2  8D C4 38     	sta joy_scan
00387B  2               scan_l:
00387B  2  E0 00        	cpx #0
00387D  2  D0 0A        	bne scan_r
00387F  2  AD C4 38     	lda joy_scan
003882  2  29 02        	and #$02
003884  2  F0 03        	beq scan_r
003886  2  A9 2F        	lda #47
003888  2  60           	rts
003889  2               scan_r:
003889  2  E0 01        	cpx #1
00388B  2  D0 0A        	bne scan_u
00388D  2  AD C4 38     	lda joy_scan
003890  2  29 01        	and #$01
003892  2  F0 03        	beq scan_u
003894  2  A9 2C        	lda #44
003896  2  60           	rts
003897  2               scan_u:
003897  2  E0 02        	cpx #2
003899  2  D0 0A        	bne scan_d
00389B  2  AD C4 38     	lda joy_scan
00389E  2  29 08        	and #$08
0038A0  2  F0 03        	beq scan_d
0038A2  2  A9 0D        	lda #13
0038A4  2  60           	rts
0038A5  2               scan_d:
0038A5  2  E0 03        	cpx #3
0038A7  2  D0 0A        	bne scan_f
0038A9  2  AD C4 38     	lda joy_scan
0038AC  2  29 04        	and #$04
0038AE  2  F0 03        	beq scan_f
0038B0  2  A9 0A        	lda #10
0038B2  2  60           	rts
0038B3  2               scan_f:
0038B3  2  E0 04        	cpx #4
0038B5  2  D0 0A        	bne scan_no
0038B7  2  AD C4 38     	lda joy_scan
0038BA  2  29 10        	and #$10
0038BC  2  F0 03        	beq scan_no
0038BE  2  A9 01        	lda #1
0038C0  2  60           	rts
0038C1  2               scan_no:
0038C1  2  A9 00        	lda #0
0038C3  2  60           	rts
0038C4  2               
0038C4  2               ;--------------------------------------------------------
0038C4  2               ; Keyboard/joystick
0038C4  2               ;
0038C4  2               ;Key    move    mat joy ret
0038C4  2               ;----------------------------
0038C4  2               ;  <  = left	 0   L   47
0038C4  2               ;  >  = right	 1   R   44
0038C4  2               ;  S  = turn CCW 2   U   13
0038C4  2               ;  A  = turn CW	 3   D   10
0038C4  2               ; SPC = dump	 4   F    1
0038C4  2               ;  P  = pause	 5       41
0038C4  2               ; ESC = reset	 6        4
0038C4  2               ;--------------------------------------------------------
0038C4  2               
0038C4  2  00           joy_scan:	.byte 0
0038C5  2               
0038C5  2               ;                      L   R   U   D   F   P   Q   JL  JR  JU  JD  JF
0038C5  2  01 09 08 06  key_row:	.byte $01,$09,$08,$06,$09,$01,$00,$00,$00,$00,$00,$00
0038C9  2  09 01 00 00  
0038CD  2  00 00 00 00  
0038D1  2  04 08 20 08  key_column:	.byte $04,$08,$20,$08,$01,$10,$20,$02,$08,$10,$04,$01
0038D5  2  01 10 20 02  
0038D9  2  08 10 04 01  
0038DD  2  2F 2C 0D 0A  key_return:	.byte  47, 44, 13, 10,  1, 41,  4, 47, 44, 13, 10,  1
0038E1  2  01 29 04 2F  
0038E5  2  2C 0D 0A 01  
0038E9  2               
0038E9  2               
0038E9  1               	.include "highscore.inc"
0038E9  2               
0038E9  2               ;----------------------------------------------------------
0038E9  2               ; Set PORTB direction
0038E9  2               ;----------------------------------------------------------
0038E9  2               
0038E9  2               joyinit:
0038E9  2  A9 FF        	lda #$ff   ; Write value to latch, bits 0-7 input
0038EB  2  8D 01 B4     	sta $b401
0038EE  2               
0038EE  2  20 0E 39     	jsr interwritedelay
0038F1  2               
0038F1  2  A9 A1        	lda #$a1   ; Write direction in latch to PORTB
0038F3  2  8D 00 B4     	sta $b400
0038F6  2               
0038F6  2               wait_until_not_busy:
0038F6  2  AD 00 B4     	lda $b400
0038F9  2  30 FB        	bmi wait_until_not_busy
0038FB  2               
0038FB  2  60           	rts
0038FC  2               
0038FC  2               ;----------------------------------------------------------
0038FC  2               ; Get PORTB value
0038FC  2               ;----------------------------------------------------------
0038FC  2               
0038FC  2               joyget:
0038FC  2  A9 A2        	lda #$a2   ; Read value PORTB in latch
0038FE  2  8D 00 B4     	sta $b400
003901  2               
003901  2  20 0E 39     	jsr interwritedelay
003904  2               
003904  2  AD 01 B4     	lda $b401
003907  2  F0 04        	beq no_joystick
003909  2  49 FF        	eor #$ff
00390B  2  29 1F        	and #$1f
00390D  2               no_joystick:
00390D  2  60           	rts
00390E  2               
00390E  2               ;----------------------------------------------------------
00390E  2               ; Short delay
00390E  2               ;
00390E  2               ; Enough to intersperse 2 writes to the FATPIC.
00390E  2               ;----------------------------------------------------------
00390E  2               
00390E  2               interwritedelay:
00390E  2  A9 08        	lda  #8
003910  2  38           	sec
003911  2               loop:
003911  2  E9 01        	sbc  #1
003913  2  D0 FC        	bne  loop
003915  2  60           	rts
003916  2               
003916  2  00           tmp_byte:   .byte 0
003917  2               
003917  1               
003917  2               
003917  2               
003917  2               ; code concerning the high score
003917  2               ; ----------------------------------
003917  2               
003917  2               CheckHighScore:
003917  2               
003917  2  A9 11        	lda #17				; Set screen position hscore
003919  2  8D 0E 3B     	sta char_xpos
00391C  2               
00391C  2  20 8E 39     	jsr CheckPosition		; Check if score = 1st, 2nd or 3rd
00391F  2  AD 39 3B     	lda scorepos
003922  2  C9 03        	cmp #3
003924  2  D0 01        	bne ThirdPlace
003926  2  60           	rts				; No highscore
003927  2               
003927  2               ; Third place
003927  2               ; Nothing to shift
003927  2               ; Goto set highscore + name
003927  2               
003927  2               ThirdPlace:
003927  2  C9 02        	cmp #2
003929  2  D0 03        	bne SecondPlace
00392B  2  4C 61 39     	jmp SetHiscore
00392E  2               
00392E  2               ; Second place
00392E  2               ; Shift score + name 2nd to 3rd
00392E  2               ; Goto set highscore + name
00392E  2               
00392E  2               SecondPlace:
00392E  2  C9 01        	cmp #1
003930  2  D0 19        	bne FirstPlace
003932  2  A2 02        	ldx #2				; Shift score 2nd to 3rd 
003934  2               second_loop:
003934  2  BD 43 3B     	lda hscore2,x
003937  2  9D 46 3B     	sta hscore3,x
00393A  2  CA           	dex
00393B  2  10 F7        	bpl second_loop
00393D  2  A2 06        	ldx #6				; shift names 2nd to 3rd 
00393F  2               second_loop2:
00393F  2  BD 50 3B     	lda hscore_name2,x
003942  2  9D 57 3B     	sta hscore_name3,x
003945  2  CA           	dex
003946  2  10 F7        	bpl second_loop2
003948  2  4C 61 39     	jmp SetHiscore
00394B  2               
00394B  2               ; First place
00394B  2               ; Shift score + name 2nd to 3rd
00394B  2               ; Shift score + name 1st to 2nd
00394B  2               ; Goto set highscore + name
00394B  2               
00394B  2               FirstPlace:
00394B  2  A2 05        	ldx #5				; Shift score 2nd to 3rd and 1st to 2nd
00394D  2               first_loop:
00394D  2  BD 40 3B     	lda hscore1,x
003950  2  9D 43 3B     	sta hscore2,x
003953  2  CA           	dex
003954  2  10 F7        	bpl first_loop
003956  2  A2 0D        	ldx #13				; Shift names 2nd to 3rd and 1st to 2nd
003958  2               first_loop1:
003958  2  BD 49 3B     	lda hscore_name1,x
00395B  2  9D 50 3B     	sta hscore_name2,x
00395E  2  CA           	dex
00395F  2  10 F7        	bpl first_loop1
003961  2               
003961  2               ; Set new high score + clear name
003961  2               
003961  2               SetHiscore:
003961  2  AE 39 3B     	ldx scorepos
003964  2  BC 3A 3B     	ldy scoreptr,x
003967  2               
003967  2  A2 02        	ldx #2				; Set new high score
003969  2               set_loop1:
003969  2  BD 52 33     	lda score,x
00396C  2  99 40 3B     	sta hscore1,y
00396F  2  88           	dey
003970  2  CA           	dex
003971  2  10 F6        	bpl set_loop1
003973  2               
003973  2  AC 39 3B     	ldy scorepos
003976  2  B9 3D 3B     	lda nameptr,y
003979  2  8D 35 3B     	sta hscorePointer
00397C  2               
00397C  2  AC 35 3B     	ldy hscorePointer		; Clear highscore name
00397F  2  A2 06        	ldx #6
003981  2  A9 20        	lda #32
003983  2               name_clear_loop:
003983  2  99 49 3B     	sta hscore_name1,y
003986  2  C8           	iny
003987  2  CA           	dex
003988  2  10 F9        	bpl name_clear_loop
00398A  2               
00398A  2  20 FA 36     	jsr StartLevelSelectMode	; Display Highscore screen
00398D  2  60           	rts	
00398E  2               
00398E  2               ; ----------------------------------
00398E  2               ; Check if score = 1st, 2nd or 3rd
00398E  2               
00398E  2               CheckPosition:					
00398E  2  A0 03        	ldy #3
003990  2  A9 46        	lda #<hscore3			; Check if score>=hscore3
003992  2  8D CA 39     	sta chk_pos+1
003995  2  A9 3B        	lda #>hscore3
003997  2  8D CB 39     	sta chk_pos+2
00399A  2  20 C4 39     	jsr Check_GTE
00399D  2  90 21        	bcc end_chk
00399F  2  88           	dey
0039A0  2  A9 43        	lda #<hscore2			; Check if score>=hscore2
0039A2  2  8D CA 39     	sta chk_pos+1
0039A5  2  A9 3B        	lda #>hscore2
0039A7  2  8D CB 39     	sta chk_pos+2
0039AA  2  20 C4 39     	jsr Check_GTE
0039AD  2  90 11        	bcc end_chk
0039AF  2  88           	dey
0039B0  2  A9 40        	lda #<hscore1			; Check if score>=hscore1
0039B2  2  8D CA 39     	sta chk_pos+1
0039B5  2  A9 3B        	lda #>hscore1
0039B7  2  8D CB 39     	sta chk_pos+2
0039BA  2  20 C4 39     	jsr Check_GTE
0039BD  2  90 01        	bcc end_chk
0039BF  2  88           	dey
0039C0  2               end_chk:
0039C0  2  8C 39 3B     	sty scorepos
0039C3  2  60           	rts
0039C4  2               
0039C4  2               ; ----------------------------------
0039C4  2               ; Check if score >= hiscore
0039C4  2               
0039C4  2               Check_GTE:
0039C4  2  A2 02        	ldx #2
0039C6  2               chk_loop:
0039C6  2  BD 52 33     	lda score,x
0039C9  2               chk_pos:
0039C9  2  DD 40 3B     	cmp hscore1,x
0039CC  2  30 07        	bmi chk_nok
0039CE  2  D0 03        	bne chk_ok
0039D0  2  CA           	dex
0039D1  2  10 F3        	bpl chk_loop
0039D3  2               chk_ok:
0039D3  2  38           	sec				; score >= hiscore
0039D4  2  60           	rts
0039D5  2               chk_nok:
0039D5  2  18           	clc				; score < hiscore
0039D6  2  60           	rts
0039D7  2               
0039D7  2               ; ----------------------------------
0039D7  2               ; Print highscore + names on screen
0039D7  2               
0039D7  2               PrintHighScores:
0039D7  2               
0039D7  2  18           	clc 				; clear carry bit so we set cursor
0039D8  2  A2 10        	ldx #14+2 			; row 14
0039DA  2  A0 09        	ldy #14-5 			; column 14
0039DC  2  20 E9 37     	jsr plot 			; move cursor so we can use chrout
0039DF  2               
0039DF  2  A9 40        	lda #<hscore1			; Print highscore1
0039E1  2  8D E1 32     	sta ploop1+1
0039E4  2  A9 3B        	lda #>hscore1
0039E6  2  8D E2 32     	sta ploop1+2
0039E9  2  20 DE 32     	jsr PrintHighScore
0039EC  2               
0039EC  2  18           	clc 				; clear carry bit so we set cursor
0039ED  2  A2 11        	ldx #15+2 			; row 15
0039EF  2  A0 09        	ldy #14-5 			; column 14
0039F1  2  20 E9 37     	jsr plot 			; move cursor so we can use chrout
0039F4  2               
0039F4  2  A9 43        	lda #<hscore2			; Print highscore2
0039F6  2  8D E1 32     	sta ploop1+1
0039F9  2  A9 3B        	lda #>hscore2
0039FB  2  8D E2 32     	sta ploop1+2
0039FE  2  20 DE 32     	jsr PrintHighScore
003A01  2               
003A01  2  18           	clc 				; clear carry bit so we set cursor
003A02  2  A2 12        	ldx #16+2 			; row 16
003A04  2  A0 09        	ldy #14-5 			; column 14
003A06  2  20 E9 37     	jsr plot 			; move cursor so we can use chrout
003A09  2               
003A09  2  A9 46        	lda #<hscore3			; Print higscore3
003A0B  2  8D E1 32     	sta ploop1+1
003A0E  2  A9 3B        	lda #>hscore3
003A10  2  8D E2 32     	sta ploop1+2
003A13  2  20 DE 32     	jsr PrintHighScore
003A16  2               
003A16  2  A9 11        	lda #17
003A18  2  85 84        	sta  XPOS
003A1A  2  A2 00        	ldx #0
003A1C  2               PrintNameLoop:
003A1C  2  A9 10        	lda #16
003A1E  2  85 85        	sta YPOS
003A20  2  BD 49 3B     	lda hscore_name1,x		; Print names after highscore1
003A23  2  20 EE 37     	jsr chrout
003A26  2  E6 85        	inc YPOS
003A28  2  BD 50 3B     	lda hscore_name2,x		; Print names after highscore2
003A2B  2  20 EE 37     	jsr chrout
003A2E  2  E6 85        	inc YPOS
003A30  2  BD 57 3B     	lda hscore_name3,x		; Print names after highscore3
003A33  2  20 EE 37     	jsr chrout
003A36  2  E6 84        	inc XPOS
003A38  2  E8           	inx
003A39  2  E0 07        	cpx #7
003A3B  2  D0 DF        	bne PrintNameLoop
003A3D  2  60           	rts
003A3E  2               
003A3E  2               ; ----------------------------------
003A3E  2               ; Blink letter + update in highscore name if changed
003A3E  2               ; LEFT 		, <   = 1 Character left
003A3E  2               ; RIGHT		. >   = 1 character right
003A3E  2               ; TURNCOUNTER	A     = previous letter
003A3E  2               ; TURNCLOCK 	S     = next letter
003A3E  2               ; DOWN 		SPACE = End
003A3E  2               
003A3E  2               UpdateHighScoremode:
003A3E  2  20 3B 2E     	jsr GetInput 			; check for input
003A41  2  AE 3A 2E     	ldx inputResult
003A44  2  E0 FF        	cpx #NOINPUT
003A46  2  D0 03        	bne key_input
003A48  2  4C D4 3A     	jmp doCharFlash
003A4B  2               
003A4B  2               	; there is input
003A4B  2               
003A4B  2               key_input:
003A4B  2  E0 01        	cpx #DOWN			; Hit space?
003A4D  2  D0 03        	bne chrskip2
003A4F  2  4C 0B 3B     	jmp EndHighscoreMode		; Yes, end of update
003A52  2               
003A52  2               chrskip2:
003A52  2  E0 0D        	cpx #TURNCOUNTER 		; hit return?
003A54  2  D0 12        	bne chrskip3
003A56  2               ;	ldx charPointer
003A56  2               ;	lda charSelection,x
003A56  2               ;	sta previousChar
003A56  2  EE 34 3B     	inc charPointer
003A59  2  AD 34 3B     	lda charPointer
003A5C  2  C9 24        	cmp #36
003A5E  2  D0 05        	bne no_ptr_reset
003A60  2  A9 00        	lda #0
003A62  2  8D 34 3B     	sta charPointer
003A65  2               no_ptr_reset:
003A65  2  4C AD 3A     	jmp chrInputDone
003A68  2               chrskip3:
003A68  2  E0 0A        	cpx #TURNCLOCK 			; hit return?
003A6A  2  D0 0D        	bne chrskip4
003A6C  2               ;	ldx charPointer
003A6C  2               ;	lda charSelection,x
003A6C  2               ;	sta previousChar
003A6C  2  CE 34 3B     	dec charPointer
003A6F  2  10 05        	bpl no_ptr_reset2
003A71  2  A9 23        	lda #35
003A73  2  8D 34 3B     	sta charPointer
003A76  2               no_ptr_reset2:
003A76  2  4C AD 3A     	jmp chrInputDone
003A79  2               chrskip4:
003A79  2  E0 2F        	cpx #LEFT
003A7B  2  D0 16        	bne chrskip5
003A7D  2               
003A7D  2  AD 0E 3B     	lda char_xpos
003A80  2  C9 11        	cmp #17
003A82  2  F0 50        	beq doCharFlash
003A84  2  20 AD 3A     	jsr chrInputDone
003A87  2  CE 35 3B     	dec hscorePointer
003A8A  2  CE 0E 3B     	dec char_xpos
003A8D  2  A9 00        	lda #0
003A8F  2  8D 34 3B     	sta charPointer
003A92  2  60           	rts
003A93  2               
003A93  2               chrskip5:
003A93  2  E0 2C        	cpx #RIGHT
003A95  2  D0 3D        	bne doCharFlash  		; no further relevant input, goto flashing
003A97  2  AD 0E 3B     	lda char_xpos
003A9A  2  C9 17        	cmp #23
003A9C  2  F0 36        	beq doCharFlash
003A9E  2  20 AD 3A     	jsr chrInputDone
003AA1  2  EE 35 3B     	inc hscorePointer
003AA4  2  EE 0E 3B     	inc char_xpos
003AA7  2  A9 00        	lda #0
003AA9  2  8D 34 3B     	sta charPointer
003AAC  2  60           	rts
003AAD  2               
003AAD  2               chrInputDone:
003AAD  2               	; level select has changed
003AAD  2               	; make sure previous level is showing
003AAD  2               
003AAD  2  AD 39 3B     	lda scorepos			; Set char position
003AB0  2  18           	clc
003AB1  2  69 10        	adc #16
003AB3  2  AA           	tax
003AB4  2  AC 0E 3B     	ldy char_xpos
003AB7  2  18           	clc
003AB8  2  20 E9 37     	jsr plot
003ABB  2               
003ABB  2  AE 34 3B     	ldx charPointer
003ABE  2  BD 0F 3B     	lda charSelection,x 		; get the level value
003AC1  2  AE 35 3B     	ldx hscorePointer
003AC4  2  9D 49 3B     	sta hscore_name1,x
003AC7  2  20 EE 37     	jsr chrout
003ACA  2               
003ACA  2               	; make sure to show change asap
003ACA  2               
003ACA  2  A9 01        	lda #$01
003ACC  2  8D 37 3B     	sta charDisplayFlag
003ACF  2  A9 12        	lda #FLASH_DELAY
003AD1  2  8D 36 3B     	sta charFlashDelay
003AD4  2               
003AD4  2               doCharFlash:
003AD4  2  CE 36 3B     	dec charFlashDelay
003AD7  2  F0 01        	beq chrskip6 			; do flashing
003AD9  2  60           	rts 				; nothing to do anymore
003ADA  2               chrskip6:
003ADA  2               	; we are going to flash the character
003ADA  2               
003ADA  2  A9 12        	lda #FLASH_DELAY
003ADC  2  8D 36 3B     	sta charFlashDelay 		; reset the delay counter
003ADF  2               
003ADF  2               	; set cursor to correct location
003ADF  2               
003ADF  2  AD 39 3B     	lda scorepos			; Set char position
003AE2  2  18           	clc
003AE3  2  69 10        	adc #16
003AE5  2  AA           	tax
003AE6  2  AC 0E 3B     	ldy char_xpos
003AE9  2  18           	clc
003AEA  2  20 E9 37     	jsr plot
003AED  2               
003AED  2               	; flip the display flag
003AED  2               
003AED  2  AD 37 3B     	lda charDisplayFlag
003AF0  2  49 01        	eor #%00000001
003AF2  2  8D 37 3B     	sta charDisplayFlag
003AF5  2               
003AF5  2  F0 0F        	beq chrspace 			; flag clear? then print space
003AF7  2  AE 34 3B     	ldx charPointer
003AFA  2  BD 0F 3B     	lda charSelection,x 		; get the level value
003AFD  2  AE 35 3B     	ldx hscorePointer
003B00  2  9D 49 3B     	sta hscore_name1,x
003B03  2  4C EE 37     	jmp chrout 			; print and exit
003B06  2               chrspace:
003B06  2  A9 26        	lda #38
003B08  2  4C EE 37     	jmp chrout 			; and exit
003B0B  2               	
003B0B  2               ; ----------------------------------
003B0B  2               
003B0B  2               EndHighscoreMode:
003B0B  2  4C D7 35     	jmp otherStep2
003B0E  2               
003B0E  2               char_xpos:
003B0E  2  00           	.byte 0
003B0F  2               ;currentChar:
003B0F  2               ;	.byte 0
003B0F  2               ;previousChar:
003B0F  2               ;	.byte 0
003B0F  2               charSelection:
003B0F  2  20           	.byte 32
003B10  2  01 02 03 04  	.byte 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
003B14  2  05 06 07 08  
003B18  2  09 0A 0B 0C  
003B1F  2  10 11 12 13  	.byte 16,17,18,19,20,21,22,23,24,25,26
003B23  2  14 15 16 17  
003B27  2  18 19 1A     
003B2A  2  30 31 32 33  	.byte 48,49,50,51,52,53,54,55,56,57
003B2E  2  34 35 36 37  
003B32  2  38 39        
003B34  2               charPointer:
003B34  2  00           	.byte 0
003B35  2               hscorePointer:
003B35  2  00           	.byte 0
003B36  2               charFlashDelay:
003B36  2  12           	.byte FLASH_DELAY		; counter
003B37  2               charDisplayFlag:
003B37  2  00           	.byte 0				; render number or space
003B38  2               charLevel:
003B38  2  00           	.byte 0
003B39  2               
003B39  2               ; ----------------------------------
003B39  2               
003B39  2  00           scorepos:	.byte 0
003B3A  2               
003B3A  2  02 05 08     scoreptr:	.byte 2,5,8
003B3D  2  00 07 0E     nameptr:	.byte 0,7,14
003B40  2               
003B40  2  00 00 02     hscore1:	.byte $00,$00,$02
003B43  2  00 00 01     hscore2:	.byte $00,$00,$01
003B46  2  00 50 00     hscore3:	.byte $00,$50,$00
003B49  2               
003B49  2  17 09 05 02  hscore_name1:	.byte 23,9,5,2,15,32,32
003B4D  2  0F 20 20     
003B50  2  0B 05 05 13  hscore_name2:	.byte 11,5,5,19,32,32,32
003B54  2  20 20 20     
003B57  2  14 05 14 12  hscore_name3:	.byte 20,5,20,18,9,19,32
003B5B  2  09 13 20     
003B5E  2               
003B5E  2               hs_pos1		= selectScreenData+14*21+4
003B5E  2               hs_pos2		= selectScreenData+15*21+4
003B5E  2               hs_pos3		= selectScreenData+16*21+4
003B5E  2               
003B5E  2               hs_name1	= hs_pos1+8
003B5E  2               hs_name2	= hs_pos2+8
003B5E  2               hs_name3	= hs_pos3+8
003B5E  2               
003B5E  2               
003B5E  2               
003B5E  1               char_base:
003B5E  1  38 44 BA A2  	.incbin "tetris_chars2.raw"
003B62  1  BA 44 38 00  
003B66  1  00 3C 4E 4E  
00429E  1               playscreen:
00429E  1  4B 4C 20 20  	.incbin "tetris_playscreen.raw"
0042A2  1  20 20 20 20  
0042A6  1  20 20 20 20  
004457  1               gameoverText:
004457  1  20 20 20 20  	.incbin "tetris_gameover.raw"
00445B  1  20 20 20 20  
00445F  1  20 20 20 DD  
00451F  1               pauseText:
00451F  1  20 20 20 20  	.incbin "tetris_paused.raw"
004523  1  20 20 20 20  
004527  1  20 20 DD DE  
0045E7  1               titleScreenData:
0045E7  1  60 60 60 60  	.incbin "tetris_titlescreen.raw"
0045EB  1  60 60 60 60  
0045EF  1  60 60 60 60  
00478B  1               keysScreenData:
00478B  1  B7 B8 B8 B8  	.incbin "tetris_keys.raw"
00478F  1  B8 B8 B8 B8  
004793  1  B8 B8 B8 B8  
004944  1               creditsScreenData:
004944  1  B7 B8 B8 B8  	.incbin "tetris_credits.raw"
004948  1  B8 B8 B8 B8  
00494C  1  B8 B8 B8 B8  
004AFD  1               selectScreenData:
004AFD  1  B7 B8 B8 B8  	.incbin "tetris_select_and_high.raw"
004B01  1  B8 B8 B8 B8  
004B05  1  B8 B8 B8 B8  
004CB6  1               
004CB6  1               ; SID music
004CB6  1               
004CB6  1  00 00 00 00  	.repeat ($5200-*)
004CBA  1  00 00 00 00  
004CBE  1  00 00 00 00  
005200  1               	  .byte 0
005200  1               	.endrep
005200  1               	.include "music.inc"
005200  1               	.include "sidplay.inc"
005200  2               ;
005200  2               ; Code equates
005200  2               ;
005200  2               L00FC       = $00FC
005200  2               L00FD       = $00FD
005200  2               
005200  2               L10C1       = L10C0+1
005200  2               L10CD       = L10CC+1
005200  2               L1106       = L1105+1
005200  2               L110A       = L1109+1
005200  2               L114F       = L114E+1
005200  2               L1154       = L1153+1
005200  2               L1159       = L1158+1
005200  2               L115B       = L115A+1
005200  2               L1231       = L1230+1
005200  2               L123A       = L1239+1
005200  2               L1288       = L1287+1
005200  2               
005200  2               LD400       = $BDC0
005200  2               LD401       = $BDC1
005200  2               LD402       = $BDC2
005200  2               LD403       = $BDC3
005200  2               LD404       = $BDC4
005200  2               LD405       = $BDC5
005200  2               LD406       = $BDC6
005200  2               LD415       = $BDD5
005200  2               LD416       = $BDD6
005200  2               LD417       = $BDD7
005200  2               LD418       = $BDD8
005200  2               ;
005200  2               ; Start of code
005200  2               ;
005200  2               ;            *= $1000
005200  2               ;
005200  2  4C BC 52     SIDinit:    jmp L10BC              ; 4C BC 10
005203  2  4C CA 52     SIDplay:    jmp L10CA              ; 4C CA 10
005206  2  4C C6 52                 jmp L10C6              ; 4C C6 10
005209  2  B9 CE 57     L1009:      lda L15CE,Y            ; B9 CE 15
00520C  2  4C 16 52                 jmp L1016              ; 4C 16 10
00520F  2  A8                       tay                    ; A8
005210  2  A9 00                    lda #$00               ; A9 00
005212  2  9D F8 55                 sta L13F8,X            ; 9D F8 13
005215  2  98                       tya                    ; 98
005216  2  9D CF 55     L1016:      sta L13CF,X            ; 9D CF 13
005219  2  BD BE 55                 lda L13BE,X            ; BD BE 13
00521C  2  9D CE 55                 sta L13CE,X            ; 9D CE 13
00521F  2  60                       rts                    ; 60
005220  2  A8                       tay                    ; A8
005221  2  B9 53 59                 lda L1753,Y            ; B9 53 17
005224  2  8D B7 55                 sta L13B7              ; 8D B7 13
005227  2  B9 56 59                 lda L1756,Y            ; B9 56 17
00522A  2  8D B8 55                 sta L13B8              ; 8D B8 13
00522D  2  A9 00                    lda #$00               ; A9 00
00522F  2  8D E5 55                 sta L13E5              ; 8D E5 13
005232  2  8D EC 55                 sta L13EC              ; 8D EC 13
005235  2  8D F3 55                 sta L13F3              ; 8D F3 13
005238  2  60                       rts                    ; 60
005239  2  DE F9 55     L1039:      dec L13F9,X            ; DE F9 13
00523C  2  4C A3 54     L103C:      jmp L12A3              ; 4C A3 12
00523F  2  F0 FB        L103F:      beq L103C              ; F0 FB
005241  2  BD F9 55                 lda L13F9,X            ; BD F9 13
005244  2  D0 F3                    bne L1039              ; D0 F3
005246  2  A9 00                    lda #$00               ; A9 00
005248  2  85 FD                    sta L00FD              ; 85 FD
00524A  2  BD F8 55                 lda L13F8,X            ; BD F8 13
00524D  2  30 09                    bmi L1058              ; 30 09
00524F  2  D9 53 59                 cmp L1753,Y            ; D9 53 17
005252  2  90 05                    bcc L1059              ; 90 05
005254  2  F0 02                    beq L1058              ; F0 02
005256  2  49 FF                    eor #$FF               ; 49 FF
005258  2  18           L1058:      clc                    ; 18
005259  2  69 02        L1059:      adc #$02               ; 69 02
00525B  2  9D F8 55                 sta L13F8,X            ; 9D F8 13
00525E  2  4A                       lsr A                  ; 4A
00525F  2  90 2E                    bcc L108F              ; 90 2E
005261  2  B0 43                    bcs L10A6              ; B0 43
005263  2  98                       tya                    ; 98
005264  2  F0 50                    beq L10B6              ; F0 50
005266  2  B9 53 59                 lda L1753,Y            ; B9 53 17
005269  2  85 FD                    sta L00FD              ; 85 FD
00526B  2  BD CE 55                 lda L13CE,X            ; BD CE 13
00526E  2  C9 02                    cmp #$02               ; C9 02
005270  2  90 1D                    bcc L108F              ; 90 1D
005272  2  F0 32                    beq L10A6              ; F0 32
005274  2  BC E7 55                 ldy L13E7,X            ; BC E7 13
005277  2  BD FB 55                 lda L13FB,X            ; BD FB 13
00527A  2  F9 22 56                 sbc L1422,Y            ; F9 22 14
00527D  2  48                       pha                    ; 48
00527E  2  BD FC 55                 lda L13FC,X            ; BD FC 13
005281  2  F9 82 56                 sbc L1482,Y            ; F9 82 14
005284  2  A8                       tay                    ; A8
005285  2  68                       pla                    ; 68
005286  2  B0 17                    bcs L109F              ; B0 17
005288  2  65 FC                    adc L00FC              ; 65 FC
00528A  2  98                       tya                    ; 98
00528B  2  65 FD                    adc L00FD              ; 65 FD
00528D  2  10 27                    bpl L10B6              ; 10 27
00528F  2  BD FB 55     L108F:      lda L13FB,X            ; BD FB 13
005292  2  65 FC                    adc L00FC              ; 65 FC
005294  2  9D FB 55                 sta L13FB,X            ; 9D FB 13
005297  2  BD FC 55                 lda L13FC,X            ; BD FC 13
00529A  2  65 FD                    adc L00FD              ; 65 FD
00529C  2  4C A0 54                 jmp L12A0              ; 4C A0 12
00529F  2  E5 FC        L109F:      sbc L00FC              ; E5 FC
0052A1  2  98                       tya                    ; 98
0052A2  2  E5 FD                    sbc L00FD              ; E5 FD
0052A4  2  30 10                    bmi L10B6              ; 30 10
0052A6  2  BD FB 55     L10A6:      lda L13FB,X            ; BD FB 13
0052A9  2  E5 FC                    sbc L00FC              ; E5 FC
0052AB  2  9D FB 55                 sta L13FB,X            ; 9D FB 13
0052AE  2  BD FC 55                 lda L13FC,X            ; BD FC 13
0052B1  2  E5 FD                    sbc L00FD              ; E5 FD
0052B3  2  4C A0 54                 jmp L12A0              ; 4C A0 12
0052B6  2  BC E7 55     L10B6:      ldy L13E7,X            ; BC E7 13
0052B9  2  4C 92 54                 jmp L1292              ; 4C 92 12
0052BC  2  8D C1 52     L10BC:      sta L10C1              ; 8D C1 10
0052BF  2  0A                       asl A                  ; 0A
0052C0  2               L10C0:
0052C0  2  69 00                    adc #$00               ; 69 00
0052C2  2  8D CD 52                 sta L10CD              ; 8D CD 10
0052C5  2  60                       rts                    ; 60
0052C6  2  8D 5B 53     L10C6:      sta L115B              ; 8D 5B 11
0052C9  2  60                       rts                    ; 60
0052CA  2  A2 00        L10CA:      ldx #$00               ; A2 00
0052CC  2               L10CC:
0052CC  2  A0 00                    ldy #$00               ; A0 00
0052CE  2  30 35                    bmi L1105              ; 30 35
0052D0  2  8A                       txa                    ; 8A
0052D1  2  A2 29                    ldx #$29               ; A2 29
0052D3  2  9D B9 55     L10D3:      sta L13B9,X            ; 9D B9 13
0052D6  2  CA                       dex                    ; CA
0052D7  2  10 FA                    bpl L10D3              ; 10 FA
0052D9  2  8D D5 BD                 sta LD415              ; 8D 15 D4
0052DC  2  8D 54 53                 sta L1154              ; 8D 54 11
0052DF  2  8D 06 53                 sta L1106              ; 8D 06 11
0052E2  2  8E CD 52                 stx L10CD              ; 8E CD 10
0052E5  2  AA                       tax                    ; AA
0052E6  2  20 F0 52                 jsr L10F0              ; 20 F0 10
0052E9  2  A2 07                    ldx #$07               ; A2 07
0052EB  2  20 F0 52                 jsr L10F0              ; 20 F0 10
0052EE  2  A2 0E                    ldx #$0E               ; A2 0E
0052F0  2  98           L10F0:      tya                    ; 98
0052F1  2  C8                       iny                    ; C8
0052F2  2  9D E3 55                 sta L13E3,X            ; 9D E3 13
0052F5  2  A9 05                    lda #$05               ; A9 05
0052F7  2  9D E5 55                 sta L13E5,X            ; 9D E5 13
0052FA  2  A9 01                    lda #$01               ; A9 01
0052FC  2  9D E6 55                 sta L13E6,X            ; 9D E6 13
0052FF  2  9D E8 55                 sta L13E8,X            ; 9D E8 13
005302  2  4C 98 55                 jmp L1398              ; 4C 98 13
005305  2  A0 00        L1105:      ldy #$00               ; A0 00
005307  2  F0 45                    beq L114E              ; F0 45
005309  2               L1109:
005309  2  A9 00                    lda #$00               ; A9 00
00530B  2  D0 23                    bne L1130              ; D0 23
00530D  2  B9 2E 59                 lda L172E,Y            ; B9 2E 17
005310  2  F0 12                    beq L1124              ; F0 12
005312  2  10 19                    bpl L112D              ; 10 19
005314  2  0A                       asl A                  ; 0A
005315  2  8D 59 53                 sta L1159              ; 8D 59 11
005318  2  B9 40 59                 lda L1740,Y            ; B9 40 17
00531B  2  8D 54 53                 sta L1154              ; 8D 54 11
00531E  2  B9 2F 59                 lda L172F,Y            ; B9 2F 17
005321  2  D0 1F                    bne L1142              ; D0 1F
005323  2  C8                       iny                    ; C8
005324  2  B9 40 59     L1124:      lda L1740,Y            ; B9 40 17
005327  2  8D 4F 53                 sta L114F              ; 8D 4F 11
00532A  2  4C 3F 53                 jmp L113F              ; 4C 3F 11
00532D  2  8D 0A 53     L112D:      sta L110A              ; 8D 0A 11
005330  2  B9 40 59     L1130:      lda L1740,Y            ; B9 40 17
005333  2  18                       clc                    ; 18
005334  2  6D 4F 53                 adc L114F              ; 6D 4F 11
005337  2  8D 4F 53                 sta L114F              ; 8D 4F 11
00533A  2  CE 0A 53                 dec L110A              ; CE 0A 11
00533D  2  D0 11                    bne L1150              ; D0 11
00533F  2  B9 2F 59     L113F:      lda L172F,Y            ; B9 2F 17
005342  2  C9 FF        L1142:      cmp #$FF               ; C9 FF
005344  2  C8                       iny                    ; C8
005345  2  98                       tya                    ; 98
005346  2  90 03                    bcc L114B              ; 90 03
005348  2  B9 40 59                 lda L1740,Y            ; B9 40 17
00534B  2  8D 06 53     L114B:      sta L1106              ; 8D 06 11
00534E  2  A9 00        L114E:      lda #$00               ; A9 00
005350  2  8D D6 BD     L1150:      sta LD416              ; 8D 16 D4
005353  2               L1153:
005353  2  A9 00                    lda #$00               ; A9 00
005355  2  8D D7 BD                 sta LD417              ; 8D 17 D4
005358  2               L1158:
005358  2  A9 00                    lda #$00               ; A9 00
00535A  2               L115A:
00535A  2  09 0F                    ora #$0F               ; 09 0F
00535C  2  8D D8 BD                 sta LD418              ; 8D 18 D4
00535F  2  20 69 53                 jsr L1169              ; 20 69 11
005362  2  A2 07                    ldx #$07               ; A2 07
005364  2  20 69 53                 jsr L1169              ; 20 69 11
005367  2  A2 0E                    ldx #$0E               ; A2 0E
005369  2  DE E6 55     L1169:      dec L13E6,X            ; DE E6 13
00536C  2  F0 1A                    beq L1188              ; F0 1A
00536E  2  10 15                    bpl L1185              ; 10 15
005370  2  BD E5 55                 lda L13E5,X            ; BD E5 13
005373  2  C9 02                    cmp #$02               ; C9 02
005375  2  B0 0B                    bcs L1182              ; B0 0B
005377  2  A8                       tay                    ; A8
005378  2  49 01                    eor #$01               ; 49 01
00537A  2  9D E5 55                 sta L13E5,X            ; 9D E5 13
00537D  2  B9 B7 55                 lda L13B7,Y            ; B9 B7 13
005380  2  E9 00                    sbc #$00               ; E9 00
005382  2  9D E6 55     L1182:      sta L13E6,X            ; 9D E6 13
005385  2  4C 3C 54     L1185:      jmp L123C              ; 4C 3C 12
005388  2  BC BE 55     L1188:      ldy L13BE,X            ; BC BE 13
00538B  2  B9 A2 55                 lda L13A2,Y            ; B9 A2 13
00538E  2  8D 31 54                 sta L1231              ; 8D 31 12
005391  2  8D 3A 54                 sta L123A              ; 8D 3A 12
005394  2  BD BC 55                 lda L13BC,X            ; BD BC 13
005397  2  D0 30                    bne L11C9              ; D0 30
005399  2  BC E3 55                 ldy L13E3,X            ; BC E3 13
00539C  2  B9 E2 56                 lda L14E2,Y            ; B9 E2 14
00539F  2  85 FC                    sta L00FC              ; 85 FC
0053A1  2  B9 00 57                 lda L1500,Y            ; B9 00 15
0053A4  2  85 FD                    sta L00FD              ; 85 FD
0053A6  2  BC B9 55                 ldy L13B9,X            ; BC B9 13
0053A9  2  B1 FC                    lda (L00FC),Y          ; B1 FC
0053AB  2  C9 FF                    cmp #$FF               ; C9 FF
0053AD  2  90 06                    bcc L11B5              ; 90 06
0053AF  2  C8                       iny                    ; C8
0053B0  2  B1 FC                    lda (L00FC),Y          ; B1 FC
0053B2  2  A8                       tay                    ; A8
0053B3  2  B1 FC                    lda (L00FC),Y          ; B1 FC
0053B5  2  C9 E0        L11B5:      cmp #$E0               ; C9 E0
0053B7  2  90 08                    bcc L11C1              ; 90 08
0053B9  2  E9 F0                    sbc #$F0               ; E9 F0
0053BB  2  9D BA 55                 sta L13BA,X            ; 9D BA 13
0053BE  2  C8                       iny                    ; C8
0053BF  2  B1 FC                    lda (L00FC),Y          ; B1 FC
0053C1  2  9D E4 55     L11C1:      sta L13E4,X            ; 9D E4 13
0053C4  2  C8                       iny                    ; C8
0053C5  2  98                       tya                    ; 98
0053C6  2  9D B9 55                 sta L13B9,X            ; 9D B9 13
0053C9  2  BC E8 55     L11C9:      ldy L13E8,X            ; BC E8 13
0053CC  2  B9 F8 57                 lda L15F8,Y            ; B9 F8 15
0053CF  2  9D 12 56                 sta L1412,X            ; 9D 12 14
0053D2  2  BD D0 55                 lda L13D0,X            ; BD D0 13
0053D5  2  F0 5F                    beq L1236              ; F0 5F
0053D7  2  38                       sec                    ; 38
0053D8  2  E9 60                    sbc #$60               ; E9 60
0053DA  2  9D E7 55                 sta L13E7,X            ; 9D E7 13
0053DD  2  A9 00                    lda #$00               ; A9 00
0053DF  2  9D CE 55                 sta L13CE,X            ; 9D CE 13
0053E2  2  9D D0 55                 sta L13D0,X            ; 9D D0 13
0053E5  2  B9 E3 57                 lda L15E3,Y            ; B9 E3 15
0053E8  2  9D F9 55                 sta L13F9,X            ; 9D F9 13
0053EB  2  B9 CE 57                 lda L15CE,Y            ; B9 CE 15
0053EE  2  9D CF 55                 sta L13CF,X            ; 9D CF 13
0053F1  2  BD BE 55                 lda L13BE,X            ; BD BE 13
0053F4  2  C9 03                    cmp #$03               ; C9 03
0053F6  2  F0 3E                    beq L1236              ; F0 3E
0053F8  2  B9 0D 58                 lda L160D,Y            ; B9 0D 16
0053FB  2  9D D2 55                 sta L13D2,X            ; 9D D2 13
0053FE  2  FE E9 55                 inc L13E9,X            ; FE E9 13
005401  2  B9 A4 57                 lda L15A4,Y            ; B9 A4 15
005404  2  F0 08                    beq L120E              ; F0 08
005406  2  9D D3 55                 sta L13D3,X            ; 9D D3 13
005409  2  A9 00                    lda #$00               ; A9 00
00540B  2  9D D4 55                 sta L13D4,X            ; 9D D4 13
00540E  2  B9 B9 57     L120E:      lda L15B9,Y            ; B9 B9 15
005411  2  F0 08                    beq L121B              ; F0 08
005413  2  8D 06 53                 sta L1106              ; 8D 06 11
005416  2  A9 00                    lda #$00               ; A9 00
005418  2  8D 0A 53                 sta L110A              ; 8D 0A 11
00541B  2  B9 8F 57     L121B:      lda L158F,Y            ; B9 8F 15
00541E  2  9D D1 55                 sta L13D1,X            ; 9D D1 13
005421  2  B9 7A 57                 lda L157A,Y            ; B9 7A 15
005424  2  9D 0E 56                 sta L140E,X            ; 9D 0E 14
005427  2  B9 65 57                 lda L1565,Y            ; B9 65 15
00542A  2  9D 0D 56                 sta L140D,X            ; 9D 0D 14
00542D  2  BD BF 55                 lda L13BF,X            ; BD BF 13
005430  2               L1230:
005430  2  20 09 52                 jsr L1009              ; 20 09 10
005433  2  4C 74 55                 jmp L1374              ; 4C 74 13
005436  2  BD BF 55     L1236:      lda L13BF,X            ; BD BF 13
005439  2               L1239:
005439  2  20 09 52                 jsr L1009              ; 20 09 10
00543C  2  BC D1 55     L123C:      ldy L13D1,X            ; BC D1 13
00543F  2  F0 30                    beq L1271              ; F0 30
005441  2  B9 22 58                 lda L1622,Y            ; B9 22 16
005444  2  C9 10                    cmp #$10               ; C9 10
005446  2  B0 0A                    bcs L1252              ; B0 0A
005448  2  DD FA 55                 cmp L13FA,X            ; DD FA 13
00544B  2  F0 0A                    beq L1257              ; F0 0A
00544D  2  FE FA 55                 inc L13FA,X            ; FE FA 13
005450  2  D0 1F                    bne L1271              ; D0 1F
005452  2  E9 10        L1252:      sbc #$10               ; E9 10
005454  2  9D D2 55                 sta L13D2,X            ; 9D D2 13
005457  2  B9 23 58     L1257:      lda L1623,Y            ; B9 23 16
00545A  2  C9 FF                    cmp #$FF               ; C9 FF
00545C  2  C8                       iny                    ; C8
00545D  2  98                       tya                    ; 98
00545E  2  90 04                    bcc L1264              ; 90 04
005460  2  18                       clc                    ; 18
005461  2  B9 7D 58                 lda L167D,Y            ; B9 7D 16
005464  2  9D D1 55     L1264:      sta L13D1,X            ; 9D D1 13
005467  2  A9 00                    lda #$00               ; A9 00
005469  2  9D FA 55                 sta L13FA,X            ; 9D FA 13
00546C  2  B9 7C 58                 lda L167C,Y            ; B9 7C 16
00546F  2  D0 19                    bne L128A              ; D0 19
005471  2  BD E6 55     L1271:      lda L13E6,X            ; BD E6 13
005474  2  F0 30                    beq L12A6              ; F0 30
005476  2  BC CE 55                 ldy L13CE,X            ; BC CE 13
005479  2  B9 B2 55                 lda L13B2,Y            ; B9 B2 13
00547C  2  8D 88 54                 sta L1288              ; 8D 88 12
00547F  2  BC CF 55                 ldy L13CF,X            ; BC CF 13
005482  2  B9 56 59                 lda L1756,Y            ; B9 56 17
005485  2  85 FC                    sta L00FC              ; 85 FC
005487  2               L1287:
005487  2  4C 3F 52                 jmp L103F              ; 4C 3F 10
00548A  2  10 05        L128A:      bpl L1291              ; 10 05
00548C  2  7D E7 55                 adc L13E7,X            ; 7D E7 13
00548F  2  29 7F                    and #$7F               ; 29 7F
005491  2  A8           L1291:      tay                    ; A8
005492  2  A9 00        L1292:      lda #$00               ; A9 00
005494  2  9D F8 55                 sta L13F8,X            ; 9D F8 13
005497  2  B9 22 56                 lda L1422,Y            ; B9 22 14
00549A  2  9D FB 55                 sta L13FB,X            ; 9D FB 13
00549D  2  B9 82 56                 lda L1482,Y            ; B9 82 14
0054A0  2  9D FC 55     L12A0:      sta L13FC,X            ; 9D FC 13
0054A3  2  BD E6 55     L12A3:      lda L13E6,X            ; BD E6 13
0054A6  2  DD 12 56     L12A6:      cmp L1412,X            ; DD 12 14
0054A9  2  F0 4E                    beq L12F9              ; F0 4E
0054AB  2  BC D3 55                 ldy L13D3,X            ; BC D3 13
0054AE  2  F0 46                    beq L12F6              ; F0 46
0054B0  2  1D BC 55                 ora L13BC,X            ; 1D BC 13
0054B3  2  F0 41                    beq L12F6              ; F0 41
0054B5  2  BD D4 55                 lda L13D4,X            ; BD D4 13
0054B8  2  D0 14                    bne L12CE              ; D0 14
0054BA  2  B9 D8 58                 lda L16D8,Y            ; B9 D8 16
0054BD  2  10 0C                    bpl L12CB              ; 10 0C
0054BF  2  9D FE 55                 sta L13FE,X            ; 9D FE 13
0054C2  2  B9 03 59                 lda L1703,Y            ; B9 03 17
0054C5  2  9D FD 55                 sta L13FD,X            ; 9D FD 13
0054C8  2  4C E7 54                 jmp L12E7              ; 4C E7 12
0054CB  2  9D D4 55     L12CB:      sta L13D4,X            ; 9D D4 13
0054CE  2  B9 03 59     L12CE:      lda L1703,Y            ; B9 03 17
0054D1  2  18                       clc                    ; 18
0054D2  2  10 03                    bpl L12D7              ; 10 03
0054D4  2  DE FE 55                 dec L13FE,X            ; DE FE 13
0054D7  2  7D FD 55     L12D7:      adc L13FD,X            ; 7D FD 13
0054DA  2  9D FD 55                 sta L13FD,X            ; 9D FD 13
0054DD  2  90 03                    bcc L12E2              ; 90 03
0054DF  2  FE FE 55                 inc L13FE,X            ; FE FE 13
0054E2  2  DE D4 55     L12E2:      dec L13D4,X            ; DE D4 13
0054E5  2  D0 0F                    bne L12F6              ; D0 0F
0054E7  2  B9 D9 58     L12E7:      lda L16D9,Y            ; B9 D9 16
0054EA  2  C9 FF                    cmp #$FF               ; C9 FF
0054EC  2  C8                       iny                    ; C8
0054ED  2  98                       tya                    ; 98
0054EE  2  90 03                    bcc L12F3              ; 90 03
0054F0  2  B9 03 59                 lda L1703,Y            ; B9 03 17
0054F3  2  9D D3 55     L12F3:      sta L13D3,X            ; 9D D3 13
0054F6  2  4C 74 55     L12F6:      jmp L1374              ; 4C 74 13
0054F9  2  BC E4 55     L12F9:      ldy L13E4,X            ; BC E4 13
0054FC  2  B9 1E 57                 lda L151E,Y            ; B9 1E 15
0054FF  2  85 FC                    sta L00FC              ; 85 FC
005501  2  B9 42 57                 lda L1542,Y            ; B9 42 15
005504  2  85 FD                    sta L00FD              ; 85 FD
005506  2  BC BC 55                 ldy L13BC,X            ; BC BC 13
005509  2  B1 FC                    lda (L00FC),Y          ; B1 FC
00550B  2  C9 40                    cmp #$40               ; C9 40
00550D  2  90 18                    bcc L1327              ; 90 18
00550F  2  C9 60                    cmp #$60               ; C9 60
005511  2  90 1E                    bcc L1331              ; 90 1E
005513  2  C9 C0                    cmp #$C0               ; C9 C0
005515  2  90 2E                    bcc L1345              ; 90 2E
005517  2  BD BD 55                 lda L13BD,X            ; BD BD 13
00551A  2  D0 02                    bne L131E              ; D0 02
00551C  2  B1 FC                    lda (L00FC),Y          ; B1 FC
00551E  2  69 00        L131E:      adc #$00               ; 69 00
005520  2  9D BD 55                 sta L13BD,X            ; 9D BD 13
005523  2  F0 46                    beq L136B              ; F0 46
005525  2  D0 4D                    bne L1374              ; D0 4D
005527  2  9D E8 55     L1327:      sta L13E8,X            ; 9D E8 13
00552A  2  C8                       iny                    ; C8
00552B  2  B1 FC                    lda (L00FC),Y          ; B1 FC
00552D  2  C9 60                    cmp #$60               ; C9 60
00552F  2  B0 14                    bcs L1345              ; B0 14
005531  2  C9 50        L1331:      cmp #$50               ; C9 50
005533  2  29 0F                    and #$0F               ; 29 0F
005535  2  9D BE 55                 sta L13BE,X            ; 9D BE 13
005538  2  F0 06                    beq L1340              ; F0 06
00553A  2  C8                       iny                    ; C8
00553B  2  B1 FC                    lda (L00FC),Y          ; B1 FC
00553D  2  9D BF 55                 sta L13BF,X            ; 9D BF 13
005540  2  B0 29        L1340:      bcs L136B              ; B0 29
005542  2  C8                       iny                    ; C8
005543  2  B1 FC                    lda (L00FC),Y          ; B1 FC
005545  2  C9 BD        L1345:      cmp #$BD               ; C9 BD
005547  2  90 06                    bcc L134F              ; 90 06
005549  2  F0 20                    beq L136B              ; F0 20
00554B  2  09 F0                    ora #$F0               ; 09 F0
00554D  2  D0 19                    bne L1368              ; D0 19
00554F  2  7D BA 55     L134F:      adc L13BA,X            ; 7D BA 13
005552  2  9D D0 55                 sta L13D0,X            ; 9D D0 13
005555  2  BD BE 55                 lda L13BE,X            ; BD BE 13
005558  2  C9 03                    cmp #$03               ; C9 03
00555A  2  F0 0F                    beq L136B              ; F0 0F
00555C  2  A9 00                    lda #$00               ; A9 00
00555E  2  9D 0E 56                 sta L140E,X            ; 9D 0E 14
005561  2  A9 0F                    lda #$0F               ; A9 0F
005563  2  9D 0D 56                 sta L140D,X            ; 9D 0D 14
005566  2  A9 FE                    lda #$FE               ; A9 FE
005568  2  9D E9 55     L1368:      sta L13E9,X            ; 9D E9 13
00556B  2  C8           L136B:      iny                    ; C8
00556C  2  B1 FC                    lda (L00FC),Y          ; B1 FC
00556E  2  F0 01                    beq L1371              ; F0 01
005570  2  98                       tya                    ; 98
005571  2  9D BC 55     L1371:      sta L13BC,X            ; 9D BC 13
005574  2  BD FD 55     L1374:      lda L13FD,X            ; BD FD 13
005577  2  9D C2 BD                 sta LD402,X            ; 9D 02 D4
00557A  2  BD FE 55                 lda L13FE,X            ; BD FE 13
00557D  2  9D C3 BD                 sta LD403,X            ; 9D 03 D4
005580  2  BD 0E 56                 lda L140E,X            ; BD 0E 14
005583  2  9D C6 BD                 sta LD406,X            ; 9D 06 D4
005586  2  BD 0D 56                 lda L140D,X            ; BD 0D 14
005589  2  9D C5 BD                 sta LD405,X            ; 9D 05 D4
00558C  2  BD FB 55                 lda L13FB,X            ; BD FB 13
00558F  2  9D C0 BD                 sta LD400,X            ; 9D 00 D4
005592  2  BD FC 55                 lda L13FC,X            ; BD FC 13
005595  2  9D C1 BD                 sta LD401,X            ; 9D 01 D4
005598  2  BD D2 55     L1398:      lda L13D2,X            ; BD D2 13
00559B  2  3D E9 55                 and L13E9,X            ; 3D E9 13
00559E  2  9D C4 BD                 sta LD404,X            ; 9D 04 D4
0055A1  2  60                       rts                    ; 60
0055A2  2  09 0F 0F 16  L13A2:      .byte $09,$0F,$0F,$16,$16,$20,$20,$20
0055A6  2  16 20 20 20  
0055AA  2  20 20 20 20              .byte $20,$20,$20,$20,$20,$20,$20,$2F
0055AE  2  20 20 20 2F  
0055B2  2  3F 66 66 63  L13B2:      .byte $3F,$66,$66,$63,$46
0055B6  2  46           
0055B7  2  08           L13B7:      .byte $08
0055B8  2  05           L13B8:      .byte $05
0055B9  2  00           L13B9:      .byte $00
0055BA  2  00 00        L13BA:      .byte $00,$00
0055BC  2  00           L13BC:      .byte $00
0055BD  2  00           L13BD:      .byte $00
0055BE  2  00           L13BE:      .byte $00
0055BF  2  00 00 00 00  L13BF:      .byte $00,$00,$00,$00,$00,$00,$00,$00
0055C3  2  00 00 00 00  
0055C7  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00
0055CB  2  00 00 00     
0055CE  2  00           L13CE:      .byte $00
0055CF  2  00           L13CF:      .byte $00
0055D0  2  00           L13D0:      .byte $00
0055D1  2  00           L13D1:      .byte $00
0055D2  2  00           L13D2:      .byte $00
0055D3  2  00           L13D3:      .byte $00
0055D4  2  00 00 00 00  L13D4:      .byte $00,$00,$00,$00,$00,$00,$00,$00
0055D8  2  00 00 00 00  
0055DC  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00
0055E0  2  00 00 00     
0055E3  2  00           L13E3:      .byte $00
0055E4  2  00           L13E4:      .byte $00
0055E5  2  00           L13E5:      .byte $00
0055E6  2  00           L13E6:      .byte $00
0055E7  2  00           L13E7:      .byte $00
0055E8  2  01           L13E8:      .byte $01
0055E9  2  FE 01 00     L13E9:      .byte $FE,$01,$00
0055EC  2  00 00 00 01  L13EC:      .byte $00,$00,$00,$01,$FE,$02,$00
0055F0  2  FE 02 00     
0055F3  2  00 00 00 01  L13F3:      .byte $00,$00,$00,$01,$FE
0055F7  2  FE           
0055F8  2  00           L13F8:      .byte $00
0055F9  2  00           L13F9:      .byte $00
0055FA  2  00           L13FA:      .byte $00
0055FB  2  00           L13FB:      .byte $00
0055FC  2  00           L13FC:      .byte $00
0055FD  2  00           L13FD:      .byte $00
0055FE  2  00 00 00 00  L13FE:      .byte $00,$00,$00,$00,$00,$00,$00,$00
005602  2  00 00 00 00  
005606  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00
00560A  2  00 00 00     
00560D  2  00           L140D:      .byte $00
00560E  2  00 00 00 00  L140E:      .byte $00,$00,$00,$00
005612  2  00 00 00 00  L1412:      .byte $00,$00,$00,$00,$00,$00,$00,$00
005616  2  00 00 00 00  
00561A  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
00561E  2  00 00 00 00  
005622  2  17 27 39 4B  L1422:      .byte $17,$27,$39,$4B,$5F,$74,$8A,$A1
005626  2  5F 74 8A A1  
00562A  2  BA D4 F0 0E              .byte $BA,$D4,$F0,$0E,$2D,$4E,$71,$96
00562E  2  2D 4E 71 96  
005632  2  BE E8 14 43              .byte $BE,$E8,$14,$43,$74,$A9,$E1,$1C
005636  2  74 A9 E1 1C  
00563A  2  5A 9C E2 2D              .byte $5A,$9C,$E2,$2D,$7C,$CF,$28,$85
00563E  2  7C CF 28 85  
005642  2  E8 52 C1 37              .byte $E8,$52,$C1,$37,$B4,$39,$C5,$5A
005646  2  B4 39 C5 5A  
00564A  2  F7 9E 4F 0A              .byte $F7,$9E,$4F,$0A,$D1,$A3,$82,$6E
00564E  2  D1 A3 82 6E  
005652  2  68 71 8A B3              .byte $68,$71,$8A,$B3,$EE,$3C,$9E,$15
005656  2  EE 3C 9E 15  
00565A  2  A2 46 04 DC              .byte $A2,$46,$04,$DC,$D0,$E2,$14,$67
00565E  2  D0 E2 14 67  
005662  2  DD 79 3C 29              .byte $DD,$79,$3C,$29,$44,$8D,$08,$B8
005666  2  44 8D 08 B8  
00566A  2  A1 C5 28 CD              .byte $A1,$C5,$28,$CD,$BA,$F1,$78,$53
00566E  2  BA F1 78 53  
005672  2  87 1A 10 71              .byte $87,$1A,$10,$71,$42,$89,$4F,$9B
005676  2  42 89 4F 9B  
00567A  2  74 E2 F0 A6              .byte $74,$E2,$F0,$A6,$0E,$33,$20,$FF
00567E  2  0E 33 20 FF  
005682  2  01 01 01 01  L1482:      .byte $01,$01,$01,$01,$01,$01,$01,$01
005686  2  01 01 01 01  
00568A  2  01 01 01 02              .byte $01,$01,$01,$02,$02,$02,$02,$02
00568E  2  02 02 02 02  
005692  2  02 02 03 03              .byte $02,$02,$03,$03,$03,$03,$03,$04
005696  2  03 03 03 04  
00569A  2  04 04 04 05              .byte $04,$04,$04,$05,$05,$05,$06,$06
00569E  2  05 05 06 06  
0056A2  2  06 07 07 08              .byte $06,$07,$07,$08,$08,$09,$09,$0A
0056A6  2  08 09 09 0A  
0056AA  2  0A 0B 0C 0D              .byte $0A,$0B,$0C,$0D,$0D,$0E,$0F,$10
0056AE  2  0D 0E 0F 10  
0056B2  2  11 12 13 14              .byte $11,$12,$13,$14,$15,$17,$18,$1A
0056B6  2  15 17 18 1A  
0056BA  2  1B 1D 1F 20              .byte $1B,$1D,$1F,$20,$22,$24,$27,$29
0056BE  2  22 24 27 29  
0056C2  2  2B 2E 31 34              .byte $2B,$2E,$31,$34,$37,$3A,$3E,$41
0056C6  2  37 3A 3E 41  
0056CA  2  45 49 4E 52              .byte $45,$49,$4E,$52,$57,$5C,$62,$68
0056CE  2  57 5C 62 68  
0056D2  2  6E 75 7C 83              .byte $6E,$75,$7C,$83,$8B,$93,$9C,$A5
0056D6  2  8B 93 9C A5  
0056DA  2  AF B9 C4 D0              .byte $AF,$B9,$C4,$D0,$DD,$EA,$F8,$FF
0056DE  2  DD EA F8 FF  
0056E2  2               
0056E2  2               ;------------------------------------------------
0056E2  2               ; Table pointers
0056E2  2               
0056E2  2  59 5D 61 65  L14E2:      .byte <L1759,<L175D,<L1761,<L1765,<L1769,<L176D,<L1771,<L1775
0056E6  2  69 6D 71 75  
0056EA  2  79 7D 81 85              .byte <L1779,<L177D,<L1781,<L1785,<L1789,<L178D,<L1791,<L1795
0056EE  2  89 8D 91 95  
0056F2  2  99 9D A1 A6              .byte <L1799,<L179D,<L17A1,<L17A6,<L17AB,<L17B0,<L17B4,<L17B9
0056F6  2  AB B0 B4 B9  
0056FA  2  BE C2 C9 D3              .byte <L17BE,<L17C2,<L17C9,<L17D3,<L17D6,<L17E2
0056FE  2  D6 E2        
005700  2               
005700  2  59 59 59 59  L1500:      .byte >L1759,>L175D,>L1761,>L1765,>L1769,>L176D,>L1771,>L1775
005704  2  59 59 59 59  
005708  2  59 59 59 59              .byte >L1779,>L177D,>L1781,>L1785,>L1789,>L178D,>L1791,>L1795
00570C  2  59 59 59 59  
005710  2  59 59 59 59              .byte >L1799,>L179D,>L17A1,>L17A6,>L17AB,>L17B0,>L17B4,>L17B9
005714  2  59 59 59 59  
005718  2  59 59 59 59              .byte >L17BE,>L17C2,>L17C9,>L17D3,>L17D6,>L17E2
00571C  2  59 59        
00571E  2               
00571E  2               ;------------------------------------------------
00571E  2               
00571E  2  EE F3 F7 FC  L151E:      .byte <L17EE,<L17F3,<L17F7,<L17FC,<L1809,<L1812,<L181F,<L182E
005722  2  09 12 1F 2E  
005726  2  4D 57 62 72              .byte <L184D,<L1857,<L1862,<L1872,<L1882,<L1887,<L188D,<L1892
00572A  2  82 87 8D 92  
00572E  2  97 9D AD B6              .byte <L1897,<L189D,<L18AD,<L18B6,<L18BE,<L1901,<L190C,<L192D
005732  2  BE 01 0C 2D  
005736  2  69 B7 32 88              .byte <L1969,<L19B7,<L1932,<L1A88,<L1AE3,<L1AE7,<L1B37,<L1B83
00573A  2  E3 E7 37 83  
00573E  2  DB 33 81 E5              .byte <L1BDB,<L1C33,<L1C81,<L1CE5
005742  2               
005742  2  59 59 59 59  L1542:      .byte >L17EE,>L17F3,>L17F7,>L17FC,>L1809,>L1812,>L181F,>L182E
005746  2  5A 5A 5A 5A  
00574A  2  5A 5A 5A 5A              .byte >L184D,>L1857,>L1862,>L1872,>L1882,>L1887,>L188D,>L1892
00574E  2  5A 5A 5A 5A  
005752  2  5A 5A 5A 5A              .byte >L1897,>L189D,>L18AD,>L18B6,>L18BE,>L1901,>L190C,>L192D
005756  2  5A 5B 5B 5B  
00575A  2  5B 5B 5B 5C              .byte >L1969,>L19B7,>L1932,>L1A88,>L1AE3,>L1AE7,>L1B37,>L1B83
00575E  2  5C 5C 5D 5D  
005762  2  5D 5E 5E                 .byte >L1BDB,>L1C33,>L1C81
005765  2               
005765  2               ;------------------------------------------------
005765  2               L1759	= L1500+$259
005765  2               L175D	= L1500+$25D
005765  2               L1761	= L1500+$261
005765  2               L1765	= L1500+$265
005765  2               L1769	= L1500+$269
005765  2               L176D	= L1500+$26D
005765  2               L1771	= L1500+$271
005765  2               L1775	= L1500+$275
005765  2               L1779	= L1500+$279
005765  2               L177D	= L1500+$27D
005765  2               L1781	= L1500+$281
005765  2               L1785	= L1500+$285
005765  2               L1789	= L1500+$289
005765  2               L178D	= L1500+$28D
005765  2               L1791	= L1500+$291
005765  2               L1795	= L1500+$295
005765  2               L1799	= L1500+$299
005765  2               L179D	= L1500+$29D
005765  2               L17A1	= L1500+$2A1
005765  2               L17A6	= L1500+$2A6
005765  2               L17AB	= L1500+$2AB
005765  2               L17B0	= L1500+$2B0
005765  2               L17B4	= L1500+$2B4
005765  2               L17B9	= L1500+$2B9
005765  2               L17BE	= L1500+$2BE
005765  2               L17C2	= L1500+$2C2
005765  2               L17C9	= L1500+$2C9
005765  2               L17D3	= L1500+$2D3
005765  2               L17D6	= L1500+$2D6
005765  2               L17E2	= L1500+$2E2
005765  2               L17EE	= L1500+$2EE
005765  2               L17F3	= L1500+$2F3
005765  2               L17F7	= L1500+$2F7
005765  2               L17FC	= L1500+$2FC
005765  2               L1809	= L1500+$309
005765  2               L1812	= L1500+$312
005765  2               L181F	= L1500+$31F
005765  2               L182E	= L1500+$32E
005765  2               L184D	= L1500+$34D
005765  2               L1857	= L1500+$357
005765  2               L1862	= L1500+$362
005765  2               L1872	= L1500+$372
005765  2               L1882	= L1500+$382
005765  2               L1887	= L1500+$387
005765  2               L188D	= L1500+$38D
005765  2               L1892	= L1500+$392
005765  2               L1897	= L1500+$397
005765  2               L189D	= L1500+$39D
005765  2               L18AD	= L1500+$3AD
005765  2               L18B6	= L1500+$3B6
005765  2               L18BE	= L1500+$3BE
005765  2               L1901	= L1500+$401
005765  2               L190C	= L1500+$40C
005765  2               L192D	= L1500+$42D
005765  2               L1969	= L1500+$469
005765  2               L19B7	= L1500+$4B7
005765  2               L1932	= L1500+$432
005765  2               L1A88	= L1500+$588
005765  2               L1AE3	= L1500+$5E3
005765  2               L1AE7	= L1500+$5E7
005765  2               L1B37	= L1500+$637
005765  2               L1B83	= L1500+$683
005765  2               L1BDB	= L1500+$6DB
005765  2               L1C33	= L1500+$733
005765  2               L1C81	= L1500+$781
005765  2               L1CE5	= L1500+$7E5
005765  2               
005765  2  1C 00 00 12  L1565:      .byte $1C,$00,$00,$12,$29,$33,$21,$00
005769  2  29 33 21 00  
00576D  2  2F 2F 02 C0              .byte $2F,$2F,$02,$C0,$00,$06,$AB,$C8
005771  2  00 06 AB C8  
005775  2  00 00 00 00              .byte $00,$00,$00,$00,$00
005779  2  00           
00577A  2  01 35 25 00  L157A:      .byte $01,$35,$25,$00,$00,$00,$01,$50
00577E  2  00 00 01 50  
005782  2  AA 49 22 0A              .byte $AA,$49,$22,$0A,$E5,$00,$0A,$AC
005786  2  E5 00 0A AC  
00578A  2  A8 F4 F5 C8              .byte $A8,$F4,$F5,$C8,$C8
00578E  2  C8           
00578F  2  22 01 1B 08  L158F:      .byte $22,$01,$1B,$08,$0B,$0E,$15,$19
005793  2  0B 0E 15 19  
005797  2  24 1E 28 2C              .byte $24,$1E,$28,$2C,$31,$34,$19,$3A
00579B  2  31 34 19 3A  
00579F  2  3C 42 4D 58              .byte $3C,$42,$4D,$58,$52
0057A3  2  52           
0057A4  2  15 01 07 05  L15A4:      .byte $15,$01,$07,$05,$01,$01,$00,$00
0057A8  2  01 01 00 00  
0057AC  2  00 00 00 0C              .byte $00,$00,$00,$0C,$25,$00,$00,$25
0057B0  2  25 00 00 25  
0057B4  2  00 25 25 27              .byte $00,$25,$25,$27,$27
0057B8  2  27           
0057B9  2  00 01 00 01  L15B9:      .byte $00,$01,$00,$01,$01,$00,$05,$00
0057BD  2  01 00 05 00  
0057C1  2  00 00 00 00              .byte $00,$00,$00,$00,$08,$00,$00,$00
0057C5  2  08 00 00 00  
0057C9  2  00 00 00 0B              .byte $00,$00,$00,$0B,$0B
0057CD  2  0B           
0057CE  2  00 00 00 01  L15CE:      .byte $00,$00,$00,$01,$00,$00,$00,$00
0057D2  2  00 00 00 00  
0057D6  2  01 00 00 00              .byte $01,$00,$00,$00,$00,$00,$00,$00
0057DA  2  00 00 00 00  
0057DE  2  00 00 00 00              .byte $00,$00,$00,$00,$00
0057E2  2  00           
0057E3  2  00 00 00 0F  L15E3:      .byte $00,$00,$00,$0F,$00,$00,$00,$00
0057E7  2  00 00 00 00  
0057EB  2  01 00 00 00              .byte $01,$00,$00,$00,$00,$00,$00,$00
0057EF  2  00 00 00 00  
0057F3  2  00 00 00 00              .byte $00,$00,$00,$00,$00
0057F7  2  00           
0057F8  2  00 02 02 01  L15F8:      .byte $00,$02,$02,$01,$02,$01,$02,$02
0057FC  2  02 01 02 02  
005800  2  04 02 02 02              .byte $04,$02,$02,$02,$02,$02,$02,$02
005804  2  02 02 02 02  
005808  2  02 02 02 02              .byte $02,$02,$02,$02,$02
00580C  2  02           
00580D  2  02 09 19 07  L160D:      .byte $02,$09,$19,$07,$09,$09,$09,$09
005811  2  09 09 09 09  
005815  2  02 02 09 09              .byte $02,$02,$09,$09,$09,$09,$09,$09
005819  2  09 09 09 09  
00581D  2  09 09 09 09              .byte $09,$09,$09,$09,$09
005821  2  09           
005822  2  09           L1622:      .byte $09
005823  2  51 51 51 51  L1623:      .byte $51,$51,$51,$51,$51,$51,$FF,$91
005827  2  51 51 FF 91  
00582B  2  21 FF 21 21              .byte $21,$FF,$21,$21,$FF,$21,$21,$21
00582F  2  FF 21 21 21  
005833  2  21 21 21 FF              .byte $21,$21,$21,$FF,$91,$01,$90,$FF
005837  2  91 01 90 FF  
00583B  2  21 FF 21 51              .byte $21,$FF,$21,$51,$FF,$27,$27,$27
00583F  2  FF 27 27 27  
005843  2  27 27 FF 21              .byte $27,$27,$FF,$21,$20,$20,$FF,$91
005847  2  20 20 FF 91  
00584B  2  91 20 FF 31              .byte $91,$20,$FF,$31,$00,$00,$00,$FF
00584F  2  00 00 00 FF  
005853  2  91 90 FF 21              .byte $91,$90,$FF,$21,$21,$21,$21,$21
005857  2  21 21 21 21  
00585B  2  FF 27 FF 21              .byte $FF,$27,$FF,$21,$00,$21,$00,$20
00585F  2  00 21 00 20  
005863  2  FF 51 50 20              .byte $FF,$51,$50,$20,$20,$20,$20,$20
005867  2  20 20 20 20  
00586B  2  20 20 20 FF              .byte $20,$20,$20,$FF,$91,$51,$50,$90
00586F  2  91 51 50 90  
005873  2  FF 91 91 20              .byte $FF,$91,$91,$20,$20,$51,$FF,$21
005877  2  20 51 FF 21  
00587B  2  20                       .byte $20
00587C  2  51           L167C:      .byte $51
00587D  2  FF 80 80 84  L167D:      .byte $FF,$80,$80,$84,$84,$87,$87,$01
005881  2  84 87 87 01  
005885  2  50 80 09 80              .byte $50,$80,$09,$80,$80,$0C,$80,$85
005889  2  80 0C 80 85  
00588D  2  83 85 83 80              .byte $83,$85,$83,$80,$10,$5F,$5F,$4F
005891  2  10 5F 5F 4F  
005895  2  00 80 00 8C              .byte $00,$80,$00,$8C,$80,$00,$8C,$8C
005899  2  80 00 8C 8C  
00589D  2  8C 8C 8C 00              .byte $8C,$8C,$8C,$00,$80,$8C,$80,$00
0058A1  2  80 8C 80 00  
0058A5  2  68 58 80 00              .byte $68,$58,$80,$00,$80,$84,$87,$8E
0058A9  2  80 84 87 8E  
0058AD  2  2C 28 20 32              .byte $2C,$28,$20,$32,$80,$81,$86,$88
0058B1  2  80 81 86 88  
0058B5  2  8C 05 80 00              .byte $8C,$05,$80,$00,$82,$81,$80,$80
0058B9  2  82 81 80 80  
0058BD  2  80 00 2A 28              .byte $80,$00,$2A,$28,$24,$20,$1C,$18
0058C1  2  24 20 1C 18  
0058C5  2  14 13 10 0B              .byte $14,$13,$10,$0B,$00,$46,$2E,$2D
0058C9  2  00 46 2E 2D  
0058CD  2  5F 00 3D 22              .byte $5F,$00,$3D,$22,$90,$90,$80,$00
0058D1  2  90 90 80 00  
0058D5  2  3D 22 80                 .byte $3D,$22,$80
0058D8  2  00           L16D8:      .byte $00
0058D9  2  31 88 00 FF  L16D9:      .byte $31,$88,$00,$FF,$80,$FF,$85,$03
0058DD  2  80 FF 85 03  
0058E1  2  07 07 FF 70              .byte $07,$07,$FF,$70,$01,$80,$04,$80
0058E5  2  01 80 04 80  
0058E9  2  04 80 04 80              .byte $04,$80,$04,$80,$04,$80,$04,$80
0058ED  2  04 80 04 80  
0058F1  2  04 80 04 80              .byte $04,$80,$04,$80,$04,$80,$04,$80
0058F5  2  04 80 04 80  
0058F9  2  04 80 04 FF              .byte $04,$80,$04,$FF,$88,$FF,$88,$81
0058FD  2  88 FF 88 81  
005901  2  10 10                    .byte $10,$10
005903  2  FF 18 88 06  L1703:      .byte $FF,$18,$88,$06,$01,$00,$00,$00
005907  2  01 00 00 00  
00590B  2  0A D0 20 09              .byte $0A,$D0,$20,$09,$80,$00,$60,$00
00590F  2  80 00 60 00  
005913  2  70 00 80 00              .byte $70,$00,$80,$00,$90,$00,$A0,$00
005917  2  90 00 A0 00  
00591B  2  B0 00 A0 00              .byte $B0,$00,$A0,$00,$90,$00,$80,$00
00591F  2  90 00 80 00  
005923  2  70 00 60 00              .byte $70,$00,$60,$00,$0C,$00,$00,$00
005927  2  0C 00 00 00  
00592B  2  10 20 E0                 .byte $10,$20,$E0
00592E  2  29           L172E:      .byte $29
00592F  2  88 00 7F FF  L172F:      .byte $88,$00,$7F,$FF,$A0,$00,$FF,$10
005933  2  A0 00 FF 10  
005937  2  10 7F B0 00              .byte $10,$7F,$B0,$00,$88,$00,$0A,$04
00593B  2  88 00 0A 04  
00593F  2  04                       .byte $04
005940  2  FF 81 88 FA  L1740:      .byte $FF,$81,$88,$FA,$04,$F1,$A0,$00
005944  2  04 F1 A0 00  
005948  2  11 40 01 A1              .byte $11,$40,$01,$A1,$A2,$C1,$03,$01
00594C  2  A2 C1 03 01  
005950  2  11 F0 10                 .byte $11,$F0,$10
005953  2  00 03 09     L1753:      .byte $00,$03,$09
005956  2  00 10 05 00  L1756:      .byte $00,$10,$05,$00,$01,$FF,$01,$02
00595A  2  01 FF 01 02  
00595E  2  01 FF 01 0E              .byte $01,$FF,$01,$0E,$01,$FF,$01,$0F
005962  2  01 FF 01 0F  
005966  2  01 FF 01 10              .byte $01,$FF,$01,$10,$01,$FF,$01,$01
00596A  2  01 FF 01 01  
00596E  2  01 FF 01 0C              .byte $01,$FF,$01,$0C,$01,$FF,$01,$0C
005972  2  01 FF 01 0C  
005976  2  01 FF 01 0D              .byte $01,$FF,$01,$0D,$01,$FF,$01,$11
00597A  2  01 FF 01 11  
00597E  2  01 FF 01 13              .byte $01,$FF,$01,$13,$01,$FF,$01,$12
005982  2  01 FF 01 12  
005986  2  01 FF 01 07              .byte $01,$FF,$01,$07,$01,$FF,$01,$05
00598A  2  01 FF 01 05  
00598E  2  01 FF 01 06              .byte $01,$FF,$01,$06,$01,$FF,$01,$0A
005992  2  01 FF 01 0A  
005996  2  01 FF 01 08              .byte $01,$FF,$01,$08,$01,$FF,$01,$09
00599A  2  01 FF 01 09  
00599E  2  01 FF 01 F3              .byte $01,$FF,$01,$F3,$0B,$01,$FF,$02
0059A2  2  0B 01 FF 02  
0059A6  2  F3 08 01 FF              .byte $F3,$08,$01,$FF,$02,$F3,$09,$01
0059AA  2  02 F3 09 01  
0059AE  2  FF 02 03 01              .byte $FF,$02,$03,$01,$FF,$01,$EB,$03
0059B2  2  FF 01 EB 03  
0059B6  2  01 FF 02 E4              .byte $01,$FF,$02,$E4,$04,$01,$FF,$02
0059BA  2  04 01 FF 02  
0059BE  2  E4 14 FF 00              .byte $E4,$14,$FF,$00,$15,$17,$19,$18
0059C2  2  15 17 19 18  
0059C6  2  19 FF 00 F0              .byte $19,$FF,$00,$F0,$16,$EE,$16,$EC
0059CA  2  16 EE 16 EC  
0059CE  2  16 EE 16 FF              .byte $16,$EE,$16,$FF,$00,$1B,$FF,$00
0059D2  2  00 1B FF 00  
0059D6  2  1E 1E 1E 1E              .byte $1E,$1E,$1E,$1E,$22,$1E,$22,$22
0059DA  2  22 1E 22 22  
0059DE  2  22 1E FF 00              .byte $22,$1E,$FF,$00,$1C,$1A,$1D,$1F
0059E2  2  1C 1A 1D 1F  
0059E6  2  20 1C 23 21              .byte $20,$1C,$23,$21,$1F,$20,$FF,$00
0059EA  2  1F 20 FF 00  
0059EE  2  03 40 60 F9              .byte $03,$40,$60,$F9,$00,$40,$BE,$F9
0059F2  2  00 40 BE F9  
0059F6  2  00 06 40 78              .byte $00,$06,$40,$78,$F9,$00,$08,$4F
0059FA  2  F9 00 08 4F  
0059FE  2  04 97 43 00              .byte $04,$97,$43,$00,$9C,$A3,$AA,$40
005A02  2  9C A3 AA 40  
005A06  2  BE FD 00 09              .byte $BE,$FD,$00,$09,$40,$8B,$90,$97
005A0A  2  40 8B 90 97  
005A0E  2  9E BE FD 00              .byte $9E,$BE,$FD,$00,$08,$40,$90,$43
005A12  2  08 40 90 43  
005A16  2  00 95 94 97              .byte $00,$95,$94,$97,$90,$95,$94,$9C
005A1A  2  90 95 94 9C  
005A1E  2  00 07 40 9C              .byte $00,$07,$40,$9C,$43,$00,$A0,$A3
005A22  2  43 00 A0 A3  
005A26  2  A8 50 43 00              .byte $A8,$50,$43,$00,$A1,$A0,$BE,$00
005A2A  2  A1 A0 BE 00  
005A2E  2  02 4F 07 84              .byte $02,$4F,$07,$84,$06,$4F,$05,$78
005A32  2  06 4F 05 78  
005A36  2  01 4F 07 9C              .byte $01,$4F,$07,$9C,$4F,$05,$9C,$02
005A3A  2  4F 05 9C 02  
005A3E  2  4F 07 84 08              .byte $4F,$07,$84,$08,$4F,$05,$84,$01
005A42  2  4F 05 84 01  
005A46  2  4F 07 9C 4F              .byte $4F,$07,$9C,$4F,$05,$9C,$00,$04
005A4A  2  05 9C 00 04  
005A4E  2  40 86 43 00              .byte $40,$86,$43,$00,$8B,$8F,$50,$FC
005A52  2  8B 8F 50 FC  
005A56  2  00 0B 4F 07              .byte $00,$0B,$4F,$07,$9E,$40,$BE,$FE
005A5A  2  9E 40 BE FE  
005A5E  2  9C BE FE 00              .byte $9C,$BE,$FE,$00,$02,$40,$9B,$43
005A62  2  02 40 9B 43  
005A66  2  00 9C 9E A0              .byte $00,$9C,$9E,$A0,$9C,$40,$BE,$8F
005A6A  2  9C 40 BE 8F  
005A6E  2  43 00 8B 00              .byte $43,$00,$8B,$00,$02,$40,$9B,$43
005A72  2  02 40 9B 43  
005A76  2  00 9C 9E A0              .byte $00,$9C,$9E,$A0,$9C,$40,$BE,$8B
005A7A  2  9C 40 BE 8B  
005A7E  2  43 00 92 00              .byte $43,$00,$92,$00,$0C,$40,$84,$F9
005A82  2  0C 40 84 F9  
005A86  2  00 02 40 6C              .byte $00,$02,$40,$6C,$BE,$FA,$00,$0A
005A8A  2  BE FA 00 0A  
005A8E  2  40 6C F9 00              .byte $40,$6C,$F9,$00,$0D,$40,$90,$F9
005A92  2  0D 40 90 F9  
005A96  2  00 05 40 90              .byte $00,$05,$40,$90,$BE,$FA,$00,$02
005A9A  2  BE FA 00 02  
005A9E  2  4F 07 84 06              .byte $4F,$07,$84,$06,$4F,$05,$78,$01
005AA2  2  4F 05 78 01  
005AA6  2  4F 07 9C 4F              .byte $4F,$07,$9C,$4F,$05,$9C,$00,$07
005AAA  2  05 9C 00 07  
005AAE  2  40 9C 43 00              .byte $40,$9C,$43,$00,$A0,$A3,$A8,$00
005AB2  2  A0 A3 A8 00  
005AB6  2  03 40 78 78              .byte $03,$40,$78,$78,$BD,$0A,$84,$00
005ABA  2  BD 0A 84 00  
005ABE  2  04 40 90 BD              .byte $04,$40,$90,$BD,$95,$BD,$97,$BD
005AC2  2  95 BD 97 BD  
005AC6  2  9C BD 90 BD              .byte $9C,$BD,$90,$BD,$95,$BD,$97,$BD
005ACA  2  95 BD 97 BD  
005ACE  2  9C BD 8E BD              .byte $9C,$BD,$8E,$BD,$93,$BD,$95,$BD
005AD2  2  93 BD 95 BD  
005AD6  2  9A BD 8E BD              .byte $9A,$BD,$8E,$BD,$93,$BD,$95,$BD
005ADA  2  93 BD 95 BD  
005ADE  2  9A BD 8C BD              .byte $9A,$BD,$8C,$BD,$90,$BD,$93,$BD
005AE2  2  90 BD 93 BD  
005AE6  2  98 BD 8C BD              .byte $98,$BD,$8C,$BD,$90,$BD,$93,$BD
005AEA  2  90 BD 93 BD  
005AEE  2  98 BD 8E BD              .byte $98,$BD,$8E,$BD,$92,$BD,$95,$BD
005AF2  2  92 BD 95 BD  
005AF6  2  9A BD 8E BD              .byte $9A,$BD,$8E,$BD,$92,$BD,$95,$BD
005AFA  2  92 BD 95 BD  
005AFE  2  9A BD 00 0E              .byte $9A,$BD,$00,$0E,$40,$9C,$F1,$9F
005B02  2  40 9C F1 9F  
005B06  2  F1 A1 F1 9E              .byte $F1,$A1,$F1,$9E,$F1,$00,$0F,$40
005B0A  2  F1 00 0F 40  
005B0E  2  9C BE 07 9C              .byte $9C,$BE,$07,$9C,$52,$01,$0D,$40
005B12  2  52 01 0D 40  
005B16  2  90 0F A8 43              .byte $90,$0F,$A8,$43,$00,$AA,$AD,$05
005B1A  2  00 AA AD 05  
005B1E  2  40 97 BD 07              .byte $40,$97,$BD,$07,$97,$52,$01,$0D
005B22  2  97 52 01 0D  
005B26  2  40 90 BD 05              .byte $40,$90,$BD,$05,$97,$BD,$00,$0E
005B2A  2  97 BD 00 0E  
005B2E  2  40 9C FE BE              .byte $40,$9C,$FE,$BE,$07,$9C,$FD,$43
005B32  2  07 9C FD 43  
005B36  2  00 9F 50 FA              .byte $00,$9F,$50,$FA,$0E,$9E,$FE,$BE
005B3A  2  0E 9E FE BE  
005B3E  2  07 9A FD 43              .byte $07,$9A,$FD,$43,$00,$95,$50,$FA
005B42  2  00 95 50 FA  
005B46  2  0E 93 FE BE              .byte $0E,$93,$FE,$BE,$07,$92,$BD,$43
005B4A  2  07 92 BD 43  
005B4E  2  00 93 50 43              .byte $00,$93,$50,$43,$00,$92,$50,$FE
005B52  2  00 92 50 FE  
005B56  2  43 00 93 50              .byte $43,$00,$93,$50,$FE,$0E,$95,$FE
005B5A  2  FE 0E 95 FE  
005B5E  2  BE 9A FE BE              .byte $BE,$9A,$FE,$BE,$9E,$FE,$BE,$9A
005B62  2  9E FE BE 9A  
005B66  2  FE BE 00 0E              .byte $FE,$BE,$00,$0E,$40,$9C,$43,$00
005B6A  2  40 9C 43 00  
005B6E  2  9E 9F A3 9C              .byte $9E,$9F,$A3,$9C,$9E,$9F,$A3,$9C
005B72  2  9E 9F A3 9C  
005B76  2  9E 9F A3 9C              .byte $9E,$9F,$A3,$9C,$9E,$9F,$A3,$40
005B7A  2  9E 9F A3 40  
005B7E  2  9A 43 00 9C              .byte $9A,$43,$00,$9C,$9E,$A1,$9A,$9C
005B82  2  9E A1 9A 9C  
005B86  2  9E A1 9A 9C              .byte $9E,$A1,$9A,$9C,$9E,$A1,$9A,$9C
005B8A  2  9E A1 9A 9C  
005B8E  2  9E A1 40 98              .byte $9E,$A1,$40,$98,$43,$00,$9C,$9E
005B92  2  43 00 9C 9E  
005B96  2  9F 98 9C 9E              .byte $9F,$98,$9C,$9E,$9F,$98,$9C,$9E
005B9A  2  9F 98 9C 9E  
005B9E  2  9F 98 9C 9E              .byte $9F,$98,$9C,$9E,$9F,$40,$9A,$43
005BA2  2  9F 40 9A 43  
005BA6  2  00 9E A1 A6              .byte $00,$9E,$A1,$A6,$9A,$9E,$A1,$A6
005BAA  2  9A 9E A1 A6  
005BAE  2  9A 9E A1 A6              .byte $9A,$9E,$A1,$A6,$9A,$9E,$A1,$A6
005BB2  2  9A 9E A1 A6  
005BB6  2  00 0E 40 A6              .byte $00,$0E,$40,$A6,$BD,$43,$00,$A5
005BBA  2  BD 43 00 A5  
005BBE  2  50 43 00 A3              .byte $50,$43,$00,$A3,$50,$43,$00,$A1
005BC2  2  50 43 00 A1  
005BC6  2  50 43 00 9F              .byte $50,$43,$00,$9F,$50,$43,$00,$9E
005BCA  2  50 43 00 9E  
005BCE  2  50 43 00 9C              .byte $50,$43,$00,$9C,$50,$43,$00,$9A
005BD2  2  50 43 00 9A  
005BD6  2  50 97 BD 43              .byte $50,$97,$BD,$43,$00,$9A,$50,$43
005BDA  2  00 9A 50 43  
005BDE  2  00 9E 50 43              .byte $00,$9E,$50,$43,$00,$A1,$50,$43
005BE2  2  00 A1 50 43  
005BE6  2  00 A6 50 43              .byte $00,$A6,$50,$43,$00,$A1,$50,$43
005BEA  2  00 A1 50 43  
005BEE  2  00 9E 50 43              .byte $00,$9E,$50,$43,$00,$9A,$50,$98
005BF2  2  00 9A 50 98  
005BF6  2  BD 43 00 9C              .byte $BD,$43,$00,$9C,$50,$43,$00,$9F
005BFA  2  50 43 00 9F  
005BFE  2  50 43 00 A4              .byte $50,$43,$00,$A4,$50,$43,$00,$A8
005C02  2  50 43 00 A8  
005C06  2  50 43 00 A4              .byte $50,$43,$00,$A4,$50,$43,$00,$9F
005C0A  2  50 43 00 9F  
005C0E  2  50 43 00 9C              .byte $50,$43,$00,$9C,$50,$9A,$BD,$43
005C12  2  50 9A BD 43  
005C16  2  00 9E 50 43              .byte $00,$9E,$50,$43,$00,$A1,$50,$43
005C1A  2  00 A1 50 43  
005C1E  2  00 A6 50 43              .byte $00,$A6,$50,$43,$00,$AA,$50,$43
005C22  2  00 AA 50 43  
005C26  2  00 A6 50 43              .byte $00,$A6,$50,$43,$00,$A1,$50,$43
005C2A  2  00 A1 50 43  
005C2E  2  00 9E 50 00              .byte $00,$9E,$50,$00,$50,$BD,$10,$9C
005C32  2  50 BD 10 9C  
005C36  2  BD 02 A0 43              .byte $BD,$02,$A0,$43,$00,$A1,$A3,$50
005C3A  2  00 A1 A3 50  
005C3E  2  BD BE A0 BD              .byte $BD,$BE,$A0,$BD,$BE,$BD,$A1,$BD
005C42  2  BE BD A1 BD  
005C46  2  43 00 A0 50              .byte $43,$00,$A0,$50,$10,$A1,$BD,$02
005C4A  2  10 A1 BD 02  
005C4E  2  9C BD 10 A1              .byte $9C,$BD,$10,$A1,$BD,$02,$97,$BD
005C52  2  BD 02 97 BD  
005C56  2  BE BD 94 BD              .byte $BE,$BD,$94,$BD,$95,$BD,$97,$BD
005C5A  2  95 BD 97 BD  
005C5E  2  10 9C BD 02              .byte $10,$9C,$BD,$02,$9C,$BD,$10,$9C
005C62  2  9C BD 10 9C  
005C66  2  BD 02 A0 BD              .byte $BD,$02,$A0,$BD,$9C,$FD,$95,$43
005C6A  2  9C FD 95 43  
005C6E  2  00 97 9A 50              .byte $00,$97,$9A,$50,$10,$9A,$BD,$02
005C72  2  10 9A BD 02  
005C76  2  9A BD 10 9A              .byte $9A,$BD,$10,$9A,$BD,$02,$9B,$BD
005C7A  2  BD 02 9B BD  
005C7E  2  10 9B BD 02              .byte $10,$9B,$BD,$02,$9B,$BD,$10,$9B
005C82  2  9B BD 10 9B  
005C86  2  BD 00 13 40              .byte $BD,$00,$13,$40,$78,$BE,$84,$BE
005C8A  2  78 BE 84 BE  
005C8E  2  14 78 BE 13              .byte $14,$78,$BE,$13,$84,$06,$9C,$13
005C92  2  84 06 9C 13  
005C96  2  78 BE 84 BE              .byte $78,$BE,$84,$BE,$14,$78,$BE,$13
005C9A  2  14 78 BE 13  
005C9E  2  84 BE 76 BE              .byte $84,$BE,$76,$BE,$82,$BE,$14,$76
005CA2  2  82 BE 14 76  
005CA6  2  BE 13 82 06              .byte $BE,$13,$82,$06,$9C,$13,$76,$BE
005CAA  2  9C 13 76 BE  
005CAE  2  82 BE 14 76              .byte $82,$BE,$14,$76,$BE,$13,$82,$BE
005CB2  2  BE 13 82 BE  
005CB6  2  75 BE 81 BE              .byte $75,$BE,$81,$BE,$14,$75,$BE,$13
005CBA  2  14 75 BE 13  
005CBE  2  81 06 9C 13              .byte $81,$06,$9C,$13,$75,$BE,$81,$BE
005CC2  2  75 BE 81 BE  
005CC6  2  14 75 BE 13              .byte $14,$75,$BE,$13,$81,$BE,$76,$BE
005CCA  2  81 BE 76 BE  
005CCE  2  82 BE 14 76              .byte $82,$BE,$14,$76,$BE,$13,$82,$06
005CD2  2  BE 13 82 06  
005CD6  2  9C 13 77 BE              .byte $9C,$13,$77,$BE,$83,$BE,$14,$77
005CDA  2  83 BE 14 77  
005CDE  2  BE 13 83 BE              .byte $BE,$13,$83,$BE,$00,$40,$BE,$C1
005CE2  2  00 40 BE C1  
005CE6  2  00 08 40 9C              .byte $00,$08,$40,$9C,$BD,$A0,$BD,$0A
005CEA  2  BD A0 BD 0A  
005CEE  2  90 BE 08 A1              .byte $90,$BE,$08,$A1,$BD,$07,$A1,$BD
005CF2  2  BD 07 A1 BD  
005CF6  2  08 A0 BD 0A              .byte $08,$A0,$BD,$0A,$84,$BE,$FE,$08
005CFA  2  84 BE FE 08  
005CFE  2  9A BD 9E BD              .byte $9A,$BD,$9E,$BD,$0A,$84,$BE,$08
005D02  2  0A 84 BE 08  
005D06  2  A6 FE BE A1              .byte $A6,$FE,$BE,$A1,$BD,$0A,$84,$BE
005D0A  2  BD 0A 84 BE  
005D0E  2  FE 08 A0 BD              .byte $FE,$08,$A0,$BD,$9C,$BD,$0A,$84
005D12  2  9C BD 0A 84  
005D16  2  BE 08 A0 BD              .byte $BE,$08,$A0,$BD,$07,$A0,$BD,$08
005D1A  2  07 A0 BD 08  
005D1E  2  A1 BD 0A 84              .byte $A1,$BD,$0A,$84,$BE,$FE,$08,$9E
005D22  2  BE FE 08 9E  
005D26  2  BD 9C BD 0A              .byte $BD,$9C,$BD,$0A,$84,$BE,$08,$9A
005D2A  2  84 BE 08 9A  
005D2E  2  FD 07 9B BD              .byte $FD,$07,$9B,$BD,$0A,$84,$BE,$FE
005D32  2  0A 84 BE FE  
005D36  2  00 5E 02 50              .byte $00,$5E,$02,$50,$02,$97,$BE,$0D
005D3A  2  02 97 BE 0D  
005D3E  2  90 BD 02 97              .byte $90,$BD,$02,$97,$BE,$FE,$97,$BE
005D42  2  BE FE 97 BE  
005D46  2  0D 90 BD 02              .byte $0D,$90,$BD,$02,$97,$BE,$FE,$95
005D4A  2  97 BE FE 95  
005D4E  2  BE 0D 8E BD              .byte $BE,$0D,$8E,$BD,$02,$95,$BE,$FE
005D52  2  02 95 BE FE  
005D56  2  95 BE 0D 8E              .byte $95,$BE,$0D,$8E,$BD,$02,$95,$BE
005D5A  2  BD 02 95 BE  
005D5E  2  FE 94 BE 0D              .byte $FE,$94,$BE,$0D,$8D,$BD,$02,$94
005D62  2  8D BD 02 94  
005D66  2  BE FE 94 BE              .byte $BE,$FE,$94,$BE,$0D,$8D,$BD,$02
005D6A  2  0D 8D BD 02  
005D6E  2  94 BE FE 92              .byte $94,$BE,$FE,$92,$BE,$0D,$8E,$BD
005D72  2  BE 0D 8E BD  
005D76  2  02 92 BE FE              .byte $02,$92,$BE,$FE,$92,$BE,$0D,$8E
005D7A  2  92 BE 0D 8E  
005D7E  2  BD 02 92 BE              .byte $BD,$02,$92,$BE,$00,$02,$40,$97
005D82  2  00 02 40 97  
005D86  2  BD 43 00 94              .byte $BD,$43,$00,$94,$50,$43,$00,$90
005D8A  2  50 43 00 90  
005D8E  2  50 43 00 8B              .byte $50,$43,$00,$8B,$50,$43,$00,$8E
005D92  2  50 43 00 8E  
005D96  2  50 43 00 90              .byte $50,$43,$00,$90,$50,$43,$00,$8B
005D9A  2  50 43 00 8B  
005D9E  2  50 BE FD 05              .byte $50,$BE,$FD,$05,$A3,$A3,$FE,$A3
005DA2  2  A3 A3 FE A3  
005DA6  2  A3 FE A3 A3              .byte $A3,$FE,$A3,$A3,$FE,$A3,$A3,$02
005DAA  2  FE A3 A3 02  
005DAE  2  95 BD 43 00              .byte $95,$BD,$43,$00,$94,$50,$43,$00
005DB2  2  94 50 43 00  
005DB6  2  95 50 43 00              .byte $95,$50,$43,$00,$94,$50,$43,$00
005DBA  2  94 50 43 00  
005DBE  2  90 50 43 00              .byte $90,$50,$43,$00,$92,$50,$43,$00
005DC2  2  92 50 43 00  
005DC6  2  90 50 43 00              .byte $90,$50,$43,$00,$92,$50,$BE,$BD
005DCA  2  92 50 BE BD  
005DCE  2  05 A3 A3 FE              .byte $05,$A3,$A3,$FE,$A3,$A3,$FE,$A3
005DD2  2  A3 A3 FE A3  
005DD6  2  A3 FE A3 A3              .byte $A3,$FE,$A3,$A3,$00,$02,$40,$97
005DDA  2  00 02 40 97  
005DDE  2  BD 43 00 94              .byte $BD,$43,$00,$94,$50,$43,$00,$90
005DE2  2  50 43 00 90  
005DE6  2  50 43 00 8B              .byte $50,$43,$00,$8B,$50,$43,$00,$8E
005DEA  2  50 43 00 8E  
005DEE  2  50 43 00 90              .byte $50,$43,$00,$90,$50,$43,$00,$8B
005DF2  2  50 43 00 8B  
005DF6  2  50 BE FD 05              .byte $50,$BE,$FD,$05,$A3,$A3,$0A,$A3
005DFA  2  A3 A3 0A A3  
005DFE  2  A3 A3 BD A3              .byte $A3,$A3,$BD,$A3,$BD,$A3,$FB,$02
005E02  2  BD A3 FB 02  
005E06  2  A1 BD 43 00              .byte $A1,$BD,$43,$00,$A0,$50,$43,$00
005E0A  2  A0 50 43 00  
005E0E  2  A1 50 43 00              .byte $A1,$50,$43,$00,$A3,$50,$43,$00
005E12  2  A3 50 43 00  
005E16  2  A1 50 43 00              .byte $A1,$50,$43,$00,$A0,$50,$43,$00
005E1A  2  A0 50 43 00  
005E1E  2  A1 50 43 00              .byte $A1,$50,$43,$00,$A3,$50,$BE,$BD
005E22  2  A3 50 BE BD  
005E26  2  05 A3 A3 FE              .byte $05,$A3,$A3,$FE,$A3,$A3,$FE,$A3
005E2A  2  A3 A3 FE A3  
005E2E  2  A3 FE A3 A3              .byte $A3,$FE,$A3,$A3,$00,$0A,$40,$A8
005E32  2  00 0A 40 A8  
005E36  2  A8 01 9C 0C              .byte $A8,$01,$9C,$0C,$9C,$0A,$A8,$BD
005E3A  2  9C 0A A8 BD  
005E3E  2  01 9C BE 0D              .byte $01,$9C,$BE,$0D,$9C,$BD,$01,$9C
005E42  2  9C BD 01 9C  
005E46  2  BD BE 0F 9C              .byte $BD,$BE,$0F,$9C,$01,$9C,$BE,$0A
005E4A  2  01 9C BE 0A  
005E4E  2  A8 A8 01 9A              .byte $A8,$A8,$01,$9A,$0C,$9C,$0A,$A8
005E52  2  0C 9C 0A A8  
005E56  2  BD 01 9A BE              .byte $BD,$01,$9A,$BE,$F8,$0A,$A8,$A8
005E5A  2  F8 0A A8 A8  
005E5E  2  01 9C 0C 9C              .byte $01,$9C,$0C,$9C,$0A,$A8,$BD,$01
005E62  2  0A A8 BD 01  
005E66  2  9C BE 0D 9C              .byte $9C,$BE,$0D,$9C,$BD,$01,$9C,$BD
005E6A  2  BD 01 9C BD  
005E6E  2  BE BD 9C BE              .byte $BE,$BD,$9C,$BE,$0A,$A8,$A8,$01
005E72  2  0A A8 A8 01  
005E76  2  9A 0C 9C 0A              .byte $9A,$0C,$9C,$0A,$A8,$BD,$01,$9A
005E7A  2  A8 BD 01 9A  
005E7E  2  BE F8 00 11              .byte $BE,$F8,$00,$11,$4E,$02,$A3,$15
005E82  2  4E 02 A3 15  
005E86  2  40 90 90 90              .byte $40,$90,$90,$90,$12,$A3,$BD,$15
005E8A  2  12 A3 BD 15  
005E8E  2  90 90 11 A3              .byte $90,$90,$11,$A3,$BD,$15,$90,$90
005E92  2  BD 15 90 90  
005E96  2  12 A3 BD 15              .byte $12,$A3,$BD,$15,$90,$90,$11,$A3
005E9A  2  90 90 11 A3  
005E9E  2  BD 15 90 90              .byte $BD,$15,$90,$90,$12,$A3,$BD,$15
005EA2  2  12 A3 BD 15  
005EA6  2  90 90 11 A3              .byte $90,$90,$11,$A3,$BD,$15,$90,$90
005EAA  2  BD 15 90 90  
005EAE  2  12 A3 BD 15              .byte $12,$A3,$BD,$15,$90,$90,$11,$A3
005EB2  2  90 90 11 A3  
005EB6  2  BD 15 90 90              .byte $BD,$15,$90,$90,$12,$A3,$BD,$15
005EBA  2  12 A3 BD 15  
005EBE  2  90 90 11 A3              .byte $90,$90,$11,$A3,$BD,$15,$90,$90
005EC2  2  BD 15 90 90  
005EC6  2  12 A3 BD 15              .byte $12,$A3,$BD,$15,$90,$90,$11,$A3
005ECA  2  90 90 11 A3  
005ECE  2  BD 15 90 90              .byte $BD,$15,$90,$90,$12,$A3,$BD,$15
005ED2  2  12 A3 BD 15  
005ED6  2  90 90 11 A3              .byte $90,$90,$11,$A3,$BD,$15,$90,$90
005EDA  2  BD 15 90 90  
005EDE  2  12 A3 BD 15              .byte $12,$A3,$BD,$15,$90,$90,$00,$0E
005EE2  2  90 90 00 0E  
005EE6  2  40 9A 43 00              .byte $40,$9A,$43,$00,$99,$97,$95,$90
005EEA  2  99 97 95 90  
005EEE  2  50 F6 8E BD              .byte $50,$F6,$8E,$BD,$43,$00,$92,$50
005EF2  2  43 00 92 50  
005EF6  2  43 00 95 50              .byte $43,$00,$95,$50,$43,$00,$9A,$50
005EFA  2  43 00 9A 50  
005EFE  2  F8 89 BD 43              .byte $F8,$89,$BD,$43,$00,$8D,$50,$43
005F02  2  00 8D 50 43  
005F06  2  00 95 50 43              .byte $00,$95,$50,$43,$00,$99,$50,$F8
005F0A  2  00 99 50 F8  
005F0E  2  8E BD 43 00              .byte $8E,$BD,$43,$00,$92,$50,$43,$00
005F12  2  92 50 43 00  
005F16  2  95 50 43 00              .byte $95,$50,$43,$00,$99,$50,$FE,$43
005F1A  2  99 50 FE 43  
005F1E  2  00 97 50 43              .byte $00,$97,$50,$43,$00,$95,$50,$FE
005F22  2  00 95 50 FE  
005F26  2  00                       .byte $00
005F27  2               
005F27  1               	.include "sound.inc"
005F27  2               ; IRQ routine
005F27  2               ; 50 Hz = 1.000.000 / 50 = 20.000 usec
005F27  2               
005F27  2               irqtime	= 20000
005F27  2               
005F27  2               init:
005F27  2  78           	sei
005F28  2               
005F28  2  20 6A 5F     	jsr reset		; Reset SID
005F2B  2               
005F2B  2  A9 5F        	lda #>irqvec		; Set IRQ vec
005F2D  2  8D 05 02     	sta $205
005F30  2  A9 5A        	lda #<irqvec
005F32  2  8D 04 02     	sta $204
005F35  2               
005F35  2  A9 20        	lda #<(irqtime)		; Set IRQ timer
005F37  2  8D 04 B8     	sta $b804
005F3A  2  A9 4E        	lda #>(irqtime)
005F3C  2  8D 05 B8     	sta $b805
005F3F  2               
005F3F  2  AD 0B B8     	lda $b80b		; Continuous IRQ on T1
005F42  2  29 7F        	and #$7f
005F44  2  09 40        	ora #$40
005F46  2  8D 0B B8     	sta $b80b
005F49  2               
005F49  2  AD 0E B8     	lda $b80e
005F4C  2  09 C0        	ora #$c0		; Enable T1-IRQ
005F4E  2  8D 0E B8     	sta $b80e
005F51  2               
005F51  2  A9 00        	lda #0			; Init SID player
005F53  2  AA           	tax
005F54  2  A8           	tay
005F55  2  20 00 52     	jsr SIDinit
005F58  2               
005F58  2  58           	cli
005F59  2  60           	rts
005F5A  2               
005F5A  2               irqvec:
005F5A  2  AD 04 B8     	lda $b804		; Clear IRQ flag
005F5D  2  8A           	txa
005F5E  2  48           	pha
005F5F  2  98           	tya
005F60  2  48           	pha
005F61  2               
005F61  2               ;	inc $c0
005F61  2               
005F61  2  20 03 52     	jsr SIDplay		; SID IRQ entry
005F64  2               
005F64  2  68           	pla
005F65  2  A8           	tay
005F66  2  68           	pla
005F67  2  AA           	tax
005F68  2  68           	pla
005F69  2  40           	rti
005F6A  2               
005F6A  2               ;--------------------------------------------------
005F6A  2               ;Reset SID
005F6A  2               ;--------------------------------------------------
005F6A  2               
005F6A  2               SID	= $bdc0
005F6A  2               
005F6A  2               reset:
005F6A  2  A2 1F              ldx #$1F               ; Reg pointer
005F6C  2  A9 00              lda #$00
005F6E  2               L30B5:
005F6E  2  9D C0 BD           sta SID,X              ; Clear reg
005F71  2  CA                 dex 
005F72  2  10 FA              bpl L30B5
005F74  2  60                 rts
005F75  2               
005F75  2               	
005F75  2               
005F75  1               eind_asm:
005F75  2               
005F75  2               ; sound main file.
005F75  2               ; sets up irq and provides a way to play sounds
005F75  2               
005F75  2               ; music definitions in sound file
005F75  2               
005F75  2               SND_MOVE_BLOCK = 0
005F75  2               SND_ROTATE_BLOCK = 1
005F75  2               SND_DROP_BLOCK = 2
005F75  2               SND_LINE = 3
005F75  2               SND_TETRIS = 4
005F75  2               SND_PAUSE_ON = 5
005F75  2               SND_PAUSE_OFF = 6
005F75  2               SND_OPTION = 7
005F75  2               SND_MUSIC_TITLE = 9
005F75  2               SND_MUSIC_GAMEOVER = 8
005F75  2               
005F75  2               ; set accumulator before calling this
005F75  2               
005F75  2               playsound:
005F75  2  8E 89 5F     	stx tmpx
005F78  2  8C 8A 5F     	sty tmpy
005F7B  2               
005F7B  2  A2 00                ldx #0
005F7D  2  A0 00                ldy #0
005F7F  2  20 00 52             jsr SIDinit
005F82  2               
005F82  2  AE 89 5F     	ldx tmpx
005F85  2  AC 8A 5F     	ldy tmpy
005F88  2  60           	rts
005F89  2               
005F89  2  00           tmpx:	.byte 0
005F8A  2  00           tmpy:	.byte 0
005F8B  2               
005F8B  2               
005F8B  1               
